#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
生成占位应用图标脚本
Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-23
Task: 创建临时占位图标，用于开发测试
"""

from PIL import Image, ImageDraw, ImageFont
import os

def create_placeholder_icon(size, filename):
    """创建占位图标"""
    # 创建图像（深蓝色背景）
    img = Image.new('RGB', (size, size), color='#1E3A8A')
    draw = ImageDraw.Draw(img)
    
    # 绘制棋盘网格
    grid_color = '#FFFFFF'
    line_width = max(2, size // 100)
    grid_size = size // 5
    
    for i in range(6):
        # 垂直线
        x = i * grid_size
        draw.line([(x, grid_size), (x, size - grid_size)], fill=grid_color, width=line_width)
        # 水平线
        y = i * grid_size
        draw.line([(grid_size, y), (size - grid_size, y)], fill=grid_color, width=line_width)
    
    # 绘制棋子
    piece_radius = grid_size // 3
    
    # 黑色棋子
    black_pieces = [(2, 2), (3, 3)]
    for row, col in black_pieces:
        x = grid_size + col * grid_size
        y = grid_size + row * grid_size
        draw.ellipse([x - piece_radius, y - piece_radius, 
                     x + piece_radius, y + piece_radius], 
                     fill='#000000', outline='#FFFFFF', width=line_width)
    
    # 白色棋子
    white_pieces = [(2, 3), (3, 2)]
    for row, col in white_pieces:
        x = grid_size + col * grid_size
        y = grid_size + row * grid_size
        draw.ellipse([x - piece_radius, y - piece_radius, 
                     x + piece_radius, y + piece_radius], 
                     fill='#FFFFFF', outline='#000000', width=line_width)
    
    # 保存图像
    img.save(filename, 'PNG', quality=95)
    print(f"✅ 创建占位图标: {filename} ({size}x{size})")

def create_adaptive_foreground(size, filename):
    """创建Android自适应前景图标（透明背景）"""
    # 创建透明背景图像
    img = Image.new('RGBA', (size, size), color=(0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    
    # 绘制简化的棋盘
    grid_color = (30, 58, 138, 255)  # 深蓝色
    line_width = max(2, size // 50)
    grid_size = size // 5
    margin = size // 10
    
    for i in range(6):
        # 垂直线
        x = margin + i * grid_size
        draw.line([(x, margin + grid_size), (x, size - margin - grid_size)], 
                 fill=grid_color, width=line_width)
        # 水平线
        y = margin + i * grid_size
        draw.line([(margin + grid_size, y), (size - margin - grid_size, y)], 
                 fill=grid_color, width=line_width)
    
    # 绘制棋子
    piece_radius = grid_size // 3
    
    # 黑色棋子
    for row, col in [(2, 2), (3, 3)]:
        x = margin + grid_size + col * grid_size
        y = margin + grid_size + row * grid_size
        draw.ellipse([x - piece_radius, y - piece_radius, 
                     x + piece_radius, y + piece_radius], 
                     fill=(0, 0, 0, 255), outline=(255, 255, 255, 255), width=line_width)
    
    # 白色棋子
    for row, col in [(2, 3), (3, 2)]:
        x = margin + grid_size + col * grid_size
        y = margin + grid_size + row * grid_size
        draw.ellipse([x - piece_radius, y - piece_radius, 
                     x + piece_radius, y + piece_radius], 
                     fill=(255, 255, 255, 255), outline=(0, 0, 0, 255), width=line_width)
    
    # 保存图像
    img.save(filename, 'PNG')
    print(f"✅ 创建自适应前景图标: {filename} ({size}x{size})")

def create_splash_logo(size, filename):
    """创建启动屏Logo"""
    # 创建透明背景图像
    img = Image.new('RGBA', (size, size), color=(0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    
    # 绘制圆形背景
    bg_color = (30, 58, 138, 255)  # 深蓝色
    draw.ellipse([0, 0, size, size], fill=bg_color)
    
    # 绘制棋盘
    grid_color = (255, 255, 255, 255)
    line_width = max(2, size // 50)
    grid_size = size // 6
    margin = size // 4
    
    for i in range(5):
        # 垂直线
        x = margin + i * grid_size
        draw.line([(x, margin), (x, size - margin)], fill=grid_color, width=line_width)
        # 水平线
        y = margin + i * grid_size
        draw.line([(margin, y), (size - margin, y)], fill=grid_color, width=line_width)
    
    # 绘制中心棋子
    center = size // 2
    piece_radius = grid_size // 2
    
    # 黑色棋子
    draw.ellipse([center - piece_radius - grid_size, center - piece_radius, 
                 center + piece_radius - grid_size, center + piece_radius], 
                 fill=(0, 0, 0, 255), outline=(255, 255, 255, 255), width=line_width)
    
    # 白色棋子
    draw.ellipse([center - piece_radius + grid_size, center - piece_radius, 
                 center + piece_radius + grid_size, center + piece_radius], 
                 fill=(255, 255, 255, 255), outline=(0, 0, 0, 255), width=line_width)
    
    # 保存图像
    img.save(filename, 'PNG')
    print(f"✅ 创建启动屏Logo: {filename} ({size}x{size})")

def main():
    """主函数"""
    print("=" * 60)
    print("生成占位应用图标")
    print("=" * 60)
    print()
    
    # 确保目录存在
    icon_dir = os.path.join('assets', 'icon')
    splash_dir = os.path.join('assets', 'splash')
    
    os.makedirs(icon_dir, exist_ok=True)
    os.makedirs(splash_dir, exist_ok=True)
    
    # 生成图标
    print("🎨 生成占位图标...")
    create_placeholder_icon(1024, os.path.join(icon_dir, 'app_icon.png'))
    create_adaptive_foreground(432, os.path.join(icon_dir, 'adaptive_foreground.png'))
    create_splash_logo(512, os.path.join(splash_dir, 'logo.png'))
    
    print()
    print("=" * 60)
    print("✅ 占位图标生成完成！")
    print()
    print("⚠️  注意：这些是临时占位图标，用于开发测试")
    print("   正式发布前请替换为专业设计的图标")
    print()
    print("下一步操作：")
    print("1. 运行: flutter pub run flutter_launcher_icons")
    print("2. 运行: flutter pub run flutter_native_splash:create")
    print("3. 测试: flutter run")
    print("=" * 60)

if __name__ == '__main__':
    try:
        main()
    except ImportError:
        print("❌ 错误：未安装PIL库")
        print()
        print("请先安装Pillow：")
        print("  pip install Pillow")
        print()
        print("或使用其他方法创建占位图标")
