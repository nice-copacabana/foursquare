#!/bin/bash
# Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
# Task: 平台代码初始化和元数据配置脚本

set -e

echo "========================================="
echo "四子游戏 - 平台代码初始化脚本"
echo "========================================="
echo ""

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 检查Flutter是否安装
if ! command -v flutter &> /dev/null; then
    echo -e "${RED}错误: Flutter未安装或未在PATH中${NC}"
    echo "请访问 https://flutter.dev/docs/get-started/install 安装Flutter"
    exit 1
fi

echo -e "${GREEN}✓ Flutter已安装${NC}"
flutter --version
echo ""

# 检查当前目录是否是Flutter项目
if [ ! -f "pubspec.yaml" ]; then
    echo -e "${RED}错误: 当前目录不是Flutter项目${NC}"
    exit 1
fi

echo -e "${GREEN}✓ 检测到Flutter项目${NC}"
echo ""

# 询问是否要创建平台代码
read -p "是否要初始化平台代码? (y/n) " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "跳过平台代码初始化"
    exit 0
fi

# 选择要创建的平台
echo "请选择要创建的平台:"
echo "1) Android"
echo "2) iOS"
echo "3) Web"
echo "4) 全部平台"
read -p "输入选择 (1-4): " platform_choice

case $platform_choice in
    1)
        PLATFORMS="android"
        ;;
    2)
        PLATFORMS="ios"
        ;;
    3)
        PLATFORMS="web"
        ;;
    4)
        PLATFORMS="android,ios,web"
        ;;
    *)
        echo -e "${RED}无效选择${NC}"
        exit 1
        ;;
esac

echo ""
echo -e "${YELLOW}警告: 此操作可能覆盖现有的平台配置文件${NC}"
read -p "确定要继续吗? (y/n) " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "操作已取消"
    exit 0
fi

# 创建平台代码
echo ""
echo "正在创建平台代码..."
flutter create --platforms=$PLATFORMS .

echo ""
echo -e "${GREEN}✓ 平台代码创建成功${NC}"
echo ""

# 配置应用元数据
echo "========================================="
echo "配置应用元数据"
echo "========================================="
echo ""

APP_NAME="四子游戏"
PACKAGE_NAME="com.qoder.foursquare"
VERSION="1.0.0"
VERSION_CODE="1"

# 配置Android
if [[ $PLATFORMS == *"android"* ]]; then
    echo "配置Android..."
    
    # 更新build.gradle
    if [ -f "android/app/build.gradle" ]; then
        # 更新applicationId
        sed -i.bak "s/applicationId \".*\"/applicationId \"$PACKAGE_NAME\"/" android/app/build.gradle
        
        # 更新版本
        sed -i.bak "s/versionCode .*/versionCode $VERSION_CODE/" android/app/build.gradle
        sed -i.bak "s/versionName \".*\"/versionName \"$VERSION\"/" android/app/build.gradle
        
        echo -e "${GREEN}✓ Android build.gradle 已更新${NC}"
    fi
    
    # 更新AndroidManifest.xml
    if [ -f "android/app/src/main/AndroidManifest.xml" ]; then
        sed -i.bak "s/android:label=\".*\"/android:label=\"$APP_NAME\"/" android/app/src/main/AndroidManifest.xml
        echo -e "${GREEN}✓ AndroidManifest.xml 已更新${NC}"
    fi
fi

# 配置iOS
if [[ $PLATFORMS == *"ios"* ]]; then
    echo "配置iOS..."
    
    if [ -f "ios/Runner/Info.plist" ]; then
        # 使用PlistBuddy更新
        /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName $APP_NAME" ios/Runner/Info.plist 2>/dev/null || \
        /usr/libexec/PlistBuddy -c "Add :CFBundleDisplayName string $APP_NAME" ios/Runner/Info.plist
        
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION" ios/Runner/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $VERSION_CODE" ios/Runner/Info.plist
        
        echo -e "${GREEN}✓ iOS Info.plist 已更新${NC}"
    fi
fi

# 配置Web
if [[ $PLATFORMS == *"web"* ]]; then
    echo "配置Web..."
    
    # 更新manifest.json
    if [ -f "web/manifest.json" ]; then
        cat > web/manifest.json << EOF
{
  "name": "$APP_NAME - Four Square Chess",
  "short_name": "$APP_NAME",
  "description": "经典策略性四子棋游戏",
  "start_url": ".",
  "display": "standalone",
  "background_color": "#1976D2",
  "theme_color": "#1976D2",
  "orientation": "any",
  "icons": [
    {
      "src": "icons/Icon-192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "icons/Icon-512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
EOF
        echo -e "${GREEN}✓ Web manifest.json 已更新${NC}"
    fi
    
    # 更新index.html标题
    if [ -f "web/index.html" ]; then
        sed -i.bak "s/<title>.*<\/title>/<title>$APP_NAME - 策略对弈，智趣无穷<\/title>/" web/index.html
        echo -e "${GREEN}✓ Web index.html 已更新${NC}"
    fi
fi

echo ""
echo "========================================="
echo "配置完成！"
echo "========================================="
echo ""
echo "应用信息:"
echo "  名称: $APP_NAME"
echo "  包名: $PACKAGE_NAME"
echo "  版本: $VERSION ($VERSION_CODE)"
echo ""
echo "下一步:"
echo "1. 运行 flutter pub get 安装依赖"
echo "2. 运行 flutter pub run flutter_launcher_icons 生成图标"
echo "3. 运行 flutter pub run flutter_native_splash:create 生成启动屏"
echo "4. 运行 flutter run 测试应用"
echo ""
echo -e "${GREEN}祝开发顺利！${NC}"
