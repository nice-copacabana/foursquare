# Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
# Task: 平台代码初始化和元数据配置脚本 (Windows PowerShell版本)

Write-Host "=========================================" -ForegroundColor Cyan
Write-Host "四子游戏 - 平台代码初始化脚本" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host ""

# 检查Flutter是否安装
try {
    $flutterVersion = flutter --version 2>&1
    Write-Host "✓ Flutter已安装" -ForegroundColor Green
    Write-Host $flutterVersion
    Write-Host ""
} catch {
    Write-Host "错误: Flutter未安装或未在PATH中" -ForegroundColor Red
    Write-Host "请访问 https://flutter.dev/docs/get-started/install 安装Flutter"
    exit 1
}

# 检查当前目录是否是Flutter项目
if (!(Test-Path "pubspec.yaml")) {
    Write-Host "错误: 当前目录不是Flutter项目" -ForegroundColor Red
    exit 1
}

Write-Host "✓ 检测到Flutter项目" -ForegroundColor Green
Write-Host ""

# 询问是否要创建平台代码
$createPlatforms = Read-Host "是否要初始化平台代码? (y/n)"
if ($createPlatforms -ne 'y' -and $createPlatforms -ne 'Y') {
    Write-Host "跳过平台代码初始化"
    exit 0
}

# 选择要创建的平台
Write-Host "请选择要创建的平台:" -ForegroundColor Yellow
Write-Host "1) Android"
Write-Host "2) iOS (需要macOS)"
Write-Host "3) Web"
Write-Host "4) Windows"
Write-Host "5) 全部平台"
$platformChoice = Read-Host "输入选择 (1-5)"

switch ($platformChoice) {
    "1" { $platforms = "android" }
    "2" { $platforms = "ios" }
    "3" { $platforms = "web" }
    "4" { $platforms = "windows" }
    "5" { $platforms = "android,ios,web,windows" }
    default {
        Write-Host "无效选择" -ForegroundColor Red
        exit 1
    }
}

Write-Host ""
Write-Host "警告: 此操作可能覆盖现有的平台配置文件" -ForegroundColor Yellow
$confirm = Read-Host "确定要继续吗? (y/n)"
if ($confirm -ne 'y' -and $confirm -ne 'Y') {
    Write-Host "操作已取消"
    exit 0
}

# 创建平台代码
Write-Host ""
Write-Host "正在创建平台代码..." -ForegroundColor Cyan
flutter create --platforms=$platforms .

Write-Host ""
Write-Host "✓ 平台代码创建成功" -ForegroundColor Green
Write-Host ""

# 配置应用元数据
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host "配置应用元数据" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host ""

$appName = "四子游戏"
$packageName = "com.qoder.foursquare"
$version = "1.0.0"
$versionCode = "1"

# 配置Android
if ($platforms -match "android") {
    Write-Host "配置Android..." -ForegroundColor Cyan
    
    # 更新build.gradle
    if (Test-Path "android\app\build.gradle") {
        $buildGradle = Get-Content "android\app\build.gradle" -Raw
        
        # 更新applicationId
        $buildGradle = $buildGradle -replace 'applicationId ".*"', "applicationId `"$packageName`""
        
        # 更新版本
        $buildGradle = $buildGradle -replace 'versionCode \d+', "versionCode $versionCode"
        $buildGradle = $buildGradle -replace 'versionName ".*"', "versionName `"$version`""
        
        Set-Content "android\app\build.gradle" $buildGradle -NoNewline
        Write-Host "✓ Android build.gradle 已更新" -ForegroundColor Green
    }
    
    # 更新AndroidManifest.xml
    if (Test-Path "android\app\src\main\AndroidManifest.xml") {
        $manifest = Get-Content "android\app\src\main\AndroidManifest.xml" -Raw
        $manifest = $manifest -replace 'android:label=".*"', "android:label=`"$appName`""
        Set-Content "android\app\src\main\AndroidManifest.xml" $manifest -NoNewline
        Write-Host "✓ AndroidManifest.xml 已更新" -ForegroundColor Green
    }
}

# 配置Web
if ($platforms -match "web") {
    Write-Host "配置Web..." -ForegroundColor Cyan
    
    # 更新manifest.json
    if (Test-Path "web\manifest.json") {
        $manifestContent = @"
{
  "name": "$appName - Four Square Chess",
  "short_name": "$appName",
  "description": "经典策略性四子棋游戏",
  "start_url": ".",
  "display": "standalone",
  "background_color": "#1976D2",
  "theme_color": "#1976D2",
  "orientation": "any",
  "icons": [
    {
      "src": "icons/Icon-192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "icons/Icon-512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
"@
        Set-Content "web\manifest.json" $manifestContent -NoNewline
        Write-Host "✓ Web manifest.json 已更新" -ForegroundColor Green
    }
    
    # 更新index.html标题
    if (Test-Path "web\index.html") {
        $indexHtml = Get-Content "web\index.html" -Raw
        $indexHtml = $indexHtml -replace '<title>.*</title>', "<title>$appName - 策略对弈，智趣无穷</title>"
        Set-Content "web\index.html" $indexHtml -NoNewline
        Write-Host "✓ Web index.html 已更新" -ForegroundColor Green
    }
}

Write-Host ""
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host "配置完成！" -ForegroundColor Green
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "应用信息:"
Write-Host "  名称: $appName"
Write-Host "  包名: $packageName"
Write-Host "  版本: $version ($versionCode)"
Write-Host ""
Write-Host "下一步:" -ForegroundColor Yellow
Write-Host "1. 运行 flutter pub get 安装依赖"
Write-Host "2. 运行 flutter pub run flutter_launcher_icons 生成图标"
Write-Host "3. 运行 flutter pub run flutter_native_splash:create 生成启动屏"
Write-Host "4. 运行 flutter run 测试应用"
Write-Host ""
Write-Host "祝开发顺利！" -ForegroundColor Green
