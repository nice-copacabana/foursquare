#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
生成静音占位音频文件脚本
Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-23
Task: 创建临时静音占位音频，用于开发测试
"""

import os
import wave
import struct

def create_silent_audio(duration_sec, filename):
    """
    创建静音MP3占位文件
    
    注意：此脚本创建WAV格式，需要FFmpeg转换为MP3
    如果有FFmpeg，使用命令：
    ffmpeg -f lavfi -i anullsrc=r=44100:cl=mono -t {duration} -q:a 9 -acodec libmp3lame {filename}
    """
    sample_rate = 44100
    num_channels = 1  # 单声道（音效）
    sample_width = 2  # 16位
    num_frames = int(sample_rate * duration_sec)
    
    # 创建WAV文件
    wav_filename = filename.replace('.mp3', '.wav')
    with wave.open(wav_filename, 'w') as wav_file:
        wav_file.setnchannels(num_channels)
        wav_file.setsampwidth(sample_width)
        wav_file.setframerate(sample_rate)
        
        # 写入静音数据
        for _ in range(num_frames):
            wav_file.writeframes(struct.pack('<h', 0))
    
    print(f"✅ 创建静音音频: {wav_filename} ({duration_sec}秒)")
    return wav_filename

def create_music_silent_audio(duration_sec, filename):
    """创建立体声静音音频（用于音乐）"""
    sample_rate = 44100
    num_channels = 2  # 立体声（音乐）
    sample_width = 2  # 16位
    num_frames = int(sample_rate * duration_sec)
    
    wav_filename = filename.replace('.mp3', '.wav')
    with wave.open(wav_filename, 'w') as wav_file:
        wav_file.setnchannels(num_channels)
        wav_file.setsampwidth(sample_width)
        wav_file.setframerate(sample_rate)
        
        # 写入立体声静音数据
        for _ in range(num_frames):
            wav_file.writeframes(struct.pack('<hh', 0, 0))
    
    print(f"✅ 创建静音音乐: {wav_filename} ({duration_sec}秒)")
    return wav_filename

def main():
    """主函数"""
    print("=" * 60)
    print("生成静音占位音频文件")
    print("=" * 60)
    print()
    print("⚠️  警告：此脚本仅创建用于测试的静音文件")
    print("   正式发布前必须替换为真实音频！")
    print()
    
    # 确保目录存在
    sounds_dir = os.path.join('assets', 'sounds')
    music_dir = os.path.join('assets', 'sounds', 'music')
    
    os.makedirs(sounds_dir, exist_ok=True)
    os.makedirs(music_dir, exist_ok=True)
    
    # 生成音效文件
    print("🔊 生成音效占位文件（WAV格式）...")
    sound_files = {
        'select.mp3': 0.3,
        'move.mp3': 0.4,
        'capture.mp3': 0.7,
        'win.mp3': 2.0,
        'lose.mp3': 2.0,
        'click.mp3': 0.2,
    }
    
    for filename, duration in sound_files.items():
        create_silent_audio(duration, os.path.join(sounds_dir, filename))
    
    # 生成音乐文件
    print()
    print("🎵 生成音乐占位文件（WAV格式）...")
    music_files = {
        'main.mp3': 90,
        'gameplay.mp3': 90,
        'victory.mp3': 25,
        'classic.mp3': 90,
        'night.mp3': 90,
    }
    
    for filename, duration in music_files.items():
        create_music_silent_audio(duration, os.path.join(music_dir, filename))
    
    print()
    print("=" * 60)
    print("✅ 静音占位文件生成完成（WAV格式）")
    print()
    print("⚠️  下一步：转换为MP3格式")
    print()
    print("方法1 - 使用FFmpeg（推荐）：")
    print("  安装: choco install ffmpeg  (Windows)")
    print("  转换单个文件:")
    print("    ffmpeg -i assets/sounds/select.wav -q:a 9 assets/sounds/select.mp3")
    print()
    print("  批量转换所有文件:")
    print("    PowerShell:")
    print("      Get-ChildItem assets\\sounds\\*.wav -Recurse | ForEach-Object {")
    print("        $mp3 = $_.FullName -replace '\\.wav$', '.mp3'")
    print("        ffmpeg -i $_.FullName -q:a 9 $mp3")
    print("      }")
    print()
    print("方法2 - 在线转换:")
    print("  访问: https://convertio.co/zh/wav-mp3/")
    print("  上传WAV文件并下载MP3")
    print()
    print("方法3 - 使用真实音频:")
    print("  参考: AUDIO_RESOURCE_GUIDE.md")
    print("  使用AI生成或从免费音效库下载")
    print()
    print("=" * 60)

if __name__ == '__main__':
    main()
