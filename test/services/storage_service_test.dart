// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 为StorageService编写完整单元测试，覆盖设置、统计数据和游戏存档功能

/// StorageService 单元测试
/// 
/// 测试覆盖：
/// - 服务初始化
/// - 游戏设置保存/加载
/// - 统计数据保存/加载/更新
/// - 游戏存档保存/加载/删除
/// - 数据重置
library;

import 'package:flutter_test/flutter_test.dart';
import 'package:foursquare/services/storage_service.dart';

void main() {
  TestWidgetsFlutterBinding.ensureInitialized();

  group('GameSettings模型', () {
    test('应该创建默认设置', () {
      const settings = GameSettings();
      
      expect(settings.soundEnabled, true);
      expect(settings.soundVolume, 0.7);
      expect(settings.musicEnabled, true);
      expect(settings.musicVolume, 0.5);
      expect(settings.musicTheme, 'main');
      expect(settings.vibrationEnabled, true);
      expect(settings.selectedTheme, 'default');
      expect(settings.difficulty, 'medium');
    });

    test('应该正确序列化和反序列化', () {
      const original = GameSettings(
        soundEnabled: false,
        soundVolume: 0.8,
        musicEnabled: false,
        musicVolume: 0.6,
        musicTheme: 'classic',
        vibrationEnabled: false,
        selectedTheme: 'dark',
        difficulty: 'hard',
      );
      
      final json = original.toJson();
      final restored = GameSettings.fromJson(json);
      
      expect(restored.soundEnabled, original.soundEnabled);
      expect(restored.soundVolume, original.soundVolume);
      expect(restored.musicEnabled, original.musicEnabled);
      expect(restored.musicVolume, original.musicVolume);
      expect(restored.musicTheme, original.musicTheme);
      expect(restored.vibrationEnabled, original.vibrationEnabled);
      expect(restored.selectedTheme, original.selectedTheme);
      expect(restored.difficulty, original.difficulty);
    });

    test('copyWith应该正确复制并修改属性', () {
      const original = GameSettings();
      
      final modified = original.copyWith(
        soundEnabled: false,
        difficulty: 'hard',
      );
      
      expect(modified.soundEnabled, false);
      expect(modified.difficulty, 'hard');
      expect(modified.soundVolume, original.soundVolume);
      expect(modified.musicEnabled, original.musicEnabled);
    });
  });

  group('GameStatistics模型', () {
    test('应该创建默认统计数据', () {
      const stats = GameStatistics();
      
      expect(stats.totalGames, 0);
      expect(stats.wins, 0);
      expect(stats.losses, 0);
      expect(stats.draws, 0);
      expect(stats.winStreak, 0);
      expect(stats.maxWinStreak, 0);
      expect(stats.totalMoves, 0);
      expect(stats.totalCaptures, 0);
      expect(stats.lastPlayedAt, null);
      expect(stats.difficultyWins, isEmpty);
      expect(stats.dailyWinRate, isEmpty);
      expect(stats.hourlyGames, isEmpty);
    });

    test('应该正确计算胜率', () {
      const stats = GameStatistics(
        totalGames: 10,
        wins: 7,
      );
      
      expect(stats.winRate, 0.7);
    });

    test('零场游戏时胜率应为0', () {
      const stats = GameStatistics();
      
      expect(stats.winRate, 0.0);
    });

    test('应该正确序列化和反序列化', () {
      final now = DateTime.now();
      final original = GameStatistics(
        totalGames: 20,
        wins: 15,
        losses: 3,
        draws: 2,
        winStreak: 5,
        maxWinStreak: 8,
        totalMoves: 300,
        totalCaptures: 50,
        lastPlayedAt: now,
        difficultyWins: {'easy': 5, 'medium': 8, 'hard': 2},
        dailyWinRate: {'2025-10-22': 0.75},
        hourlyGames: {'14': 10, '15': 10},
      );
      
      final json = original.toJson();
      final restored = GameStatistics.fromJson(json);
      
      expect(restored.totalGames, original.totalGames);
      expect(restored.wins, original.wins);
      expect(restored.losses, original.losses);
      expect(restored.draws, original.draws);
      expect(restored.winStreak, original.winStreak);
      expect(restored.maxWinStreak, original.maxWinStreak);
      expect(restored.totalMoves, original.totalMoves);
      expect(restored.totalCaptures, original.totalCaptures);
      expect(restored.lastPlayedAt?.toIso8601String(), 
             original.lastPlayedAt?.toIso8601String());
      expect(restored.difficultyWins, original.difficultyWins);
    });

    test('copyWith应该正确复制并修改属性', () {
      const original = GameStatistics(totalGames: 5, wins: 3);
      
      final modified = original.copyWith(
        totalGames: 6,
        wins: 4,
      );
      
      expect(modified.totalGames, 6);
      expect(modified.wins, 4);
      expect(modified.losses, original.losses);
      expect(modified.draws, original.draws);
    });
  });

  group('StorageService', () {
    test('应该创建单例实例', () {
      final service1 = StorageService();
      final service2 = StorageService();
      
      expect(identical(service1, service2), true);
    });
  });
}
