// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 为AudioService编写完整单元测试，覆盖所有音效播放、音量控制和错误处理场景

/// AudioService 单元测试
/// 
/// 测试覆盖：
/// - 服务初始化
/// - 音效播放
/// - 音量控制
/// - 启用/禁用功能
library;

import 'package:flutter_test/flutter_test.dart';
import 'package:foursquare/services/audio_service.dart';

void main() {
  TestWidgetsFlutterBinding.ensureInitialized();

  group('AudioService初始化', () {
    test('应该创建单例实例', () {
      final service1 = AudioService();
      final service2 = AudioService();
      
      expect(identical(service1, service2), true);
    });

    test('应该设置默认音量为0.7', () {
      final service = AudioService();
      
      expect(service.getVolume(), 0.7);
    });

    test('应该默认启用音效', () {
      final service = AudioService();
      
      expect(service.isEnabled(), true);
    });
  });

  group('音效播放', () {
    test('应该播放选中音效', () {
      final service = AudioService();
      
      expect(() => service.playSound(SoundType.select), returnsNormally);
    });

    test('应该播放移动音效', () async {
      final service = AudioService();
      
      // 播放音效不应该抛出异常
      expect(() => service.playSound(SoundType.move), returnsNormally);
    });

    test('应该播放吃子音效', () {
      final service = AudioService();
      
      expect(() => service.playSound(SoundType.capture), returnsNormally);
    });

    test('应该播放获胜音效', () {
      final service = AudioService();
      
      expect(() => service.playSound(SoundType.win), returnsNormally);
    });

    test('应该播放失败音效', () {
      final service = AudioService();
      
      expect(() => service.playSound(SoundType.lose), returnsNormally);
    });

    test('应该播放点击音效', () {
      final service = AudioService();
      
      expect(() => service.playSound(SoundType.click), returnsNormally);
    });

    test('禁用时不应该播放音效', () {
      final service = AudioService();
      service.setEnabled(false);
      
      // 播放音效不应该抛出异常，但实际不会播放
      expect(() => service.playSound(SoundType.move), returnsNormally);
    });
  });

  group('音量控制', () {
    test('应该正确设置音量', () {
      final service = AudioService();
      
      service.setVolume(0.8);
      expect(service.getVolume(), 0.8);
    });

    test('应该处理最小音量边界值', () {
      final service = AudioService();
      
      service.setVolume(0.0);
      expect(service.getVolume(), 0.0);
    });

    test('应该处理最大音量边界值', () {
      final service = AudioService();
      
      service.setVolume(1.0);
      expect(service.getVolume(), 1.0);
    });

    test('应该限制音量不超过最大值', () {
      final service = AudioService();
      
      service.setVolume(1.5);
      expect(service.getVolume(), lessThanOrEqualTo(1.0));
    });

    test('应该限制音量不低于最小值', () {
      final service = AudioService();
      
      service.setVolume(-0.5);
      expect(service.getVolume(), greaterThanOrEqualTo(0.0));
    });

    test('应该正确获取当前音量', () {
      final service = AudioService();
      
      service.setVolume(0.6);
      final volume = service.getVolume();
      
      expect(volume, 0.6);
    });

    test('多次设置音量应该使用最后一次的值', () {
      final service = AudioService();
      
      service.setVolume(0.3);
      service.setVolume(0.7);
      service.setVolume(0.5);
      
      expect(service.getVolume(), 0.5);
    });
  });

  group('启用/禁用功能', () {
    test('应该禁用音效', () {
      final service = AudioService();
      
      service.setEnabled(false);
      expect(service.isEnabled(), false);
    });

    test('应该启用音效', () {
      final service = AudioService();
      
      service.setEnabled(false);
      service.setEnabled(true);
      
      expect(service.isEnabled(), true);
    });

    test('禁用时播放音效不应抛出异常', () {
      final service = AudioService();
      service.setEnabled(false);
      
      expect(() => service.playSound(SoundType.move), returnsNormally);
    });

    test('切换启用状态', () {
      final service = AudioService();
      
      final initialState = service.isEnabled();
      service.setEnabled(!initialState);
      
      expect(service.isEnabled(), !initialState);
    });
  });

  group('音效类型', () {
    test('SoundType枚举应包含所有音效类型', () {
      final allTypes = SoundType.values;
      
      expect(allTypes.contains(SoundType.select), true);
      expect(allTypes.contains(SoundType.move), true);
      expect(allTypes.contains(SoundType.capture), true);
      expect(allTypes.contains(SoundType.win), true);
      expect(allTypes.contains(SoundType.lose), true);
      expect(allTypes.contains(SoundType.click), true);
    });

    test('应该有6种音效类型', () {
      expect(SoundType.values.length, 6);
    });

    test('应该支持所有音效类型的播放', () {
      final service = AudioService();
      
      for (final soundType in SoundType.values) {
        expect(() => service.playSound(soundType), returnsNormally);
      }
    });
  });

  group('综合测试', () {
    test('设置音量后播放音效', () {
      final service = AudioService();
      
      service.setVolume(0.7);
      expect(() => service.playSound(SoundType.move), returnsNormally);
      expect(service.getVolume(), 0.7);
    });

    test('禁用状态不影响音量设置', () {
      final service = AudioService();
      
      service.setVolume(0.8);
      service.setEnabled(false);
      
      expect(service.getVolume(), 0.8);
      expect(service.isEnabled(), false);
    });

    test('多次播放同一音效', () {
      final service = AudioService();
      
      expect(() {
        service.playSound(SoundType.click);
        service.playSound(SoundType.click);
        service.playSound(SoundType.click);
      }, returnsNormally);
    });

    test('连续播放不同音效', () {
      final service = AudioService();
      
      expect(() {
        service.playSound(SoundType.move);
        service.playSound(SoundType.capture);
        service.playSound(SoundType.win);
      }, returnsNormally);
    });

    test('调整音量后所有音效应使用新音量', () {
      final service = AudioService();
      
      service.setVolume(0.5);
      
      // 播放各种音效
      for (final type in SoundType.values) {
        expect(() => service.playSound(type), returnsNormally);
      }
      
      // 音量应该保持不变
      expect(service.getVolume(), 0.5);
    });
  });
}
