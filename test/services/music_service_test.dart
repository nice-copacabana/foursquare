// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 为MusicService编写完整单元测试，覆盖音乐播放、主题切换和音量控制

/// MusicService 单元测试
/// 
/// 测试覆盖：
/// - 服务初始化
/// - 音乐主题播放
/// - 主题切换
/// - 音量控制
/// - 启用/禁用功能
/// - 播放状态管理
library;

import 'package:flutter_test/flutter_test.dart';
import 'package:foursquare/services/music_service.dart';

void main() {
  TestWidgetsFlutterBinding.ensureInitialized();

  group('MusicService初始化', () {
    test('应该创建单例实例', () {
      final service1 = MusicService();
      final service2 = MusicService();
      
      expect(identical(service1, service2), true);
    });

    test('应该设置默认音量为0.4', () {
      final service = MusicService();
      
      expect(service.getVolume(), 0.4);
    });

    test('应该默认启用音乐', () {
      final service = MusicService();
      
      expect(service.isEnabled(), true);
    });

    test('初始时不应该在播放', () {
      final service = MusicService();
      
      expect(service.isPlaying(), false);
    });

    test('初始时没有当前主题', () {
      final service = MusicService();
      
      expect(service.getCurrentTheme(), null);
    });
  });

  group('音乐主题类型', () {
    test('MusicTheme枚举应包含所有主题', () {
      final allThemes = MusicTheme.values;
      
      expect(allThemes.contains(MusicTheme.main), true);
      expect(allThemes.contains(MusicTheme.gameplay), true);
      expect(allThemes.contains(MusicTheme.victory), true);
      expect(allThemes.contains(MusicTheme.classic), true);
      expect(allThemes.contains(MusicTheme.night), true);
      expect(allThemes.contains(MusicTheme.relaxing), true);
    });

    test('应该有6种音乐主题', () {
      expect(MusicTheme.values.length, 6);
    });
  });

  group('音量控制', () {
    test('应该正确设置音量', () async {
      final service = MusicService();
      
      await service.setVolume(0.8);
      expect(service.getVolume(), 0.8);
    });

    test('应该处理最小音量边界值', () async {
      final service = MusicService();
      
      await service.setVolume(0.0);
      expect(service.getVolume(), 0.0);
    });

    test('应该处理最大音量边界值', () async {
      final service = MusicService();
      
      await service.setVolume(1.0);
      expect(service.getVolume(), 1.0);
    });

    test('应该限制音量不超过最大值', () async {
      final service = MusicService();
      
      await service.setVolume(1.5);
      expect(service.getVolume(), lessThanOrEqualTo(1.0));
    });

    test('应该限制音量不低于最小值', () async {
      final service = MusicService();
      
      await service.setVolume(-0.5);
      expect(service.getVolume(), greaterThanOrEqualTo(0.0));
    });
  });

  group('启用/禁用功能', () {
    test('应该禁用音乐', () async {
      final service = MusicService();
      
      await service.setEnabled(false);
      expect(service.isEnabled(), false);
    });

    test('应该启用音乐', () async {
      final service = MusicService();
      
      await service.setEnabled(false);
      await service.setEnabled(true);
      
      expect(service.isEnabled(), true);
    });

    test('禁用时播放音乐不应抛出异常', () async {
      final service = MusicService();
      await service.setEnabled(false);
      
      expect(() => service.playMusic(MusicTheme.main), returnsNormally);
    });
  });

  group('音乐播放', () {
    test('播放主菜单音乐不应抛出异常', () {
      final service = MusicService();
      
      expect(() => service.playMusic(MusicTheme.main), returnsNormally);
    });

    test('播放游戏音乐不应抛出异常', () {
      final service = MusicService();
      
      expect(() => service.playMusic(MusicTheme.gameplay), returnsNormally);
    });

    test('播放胜利音乐不应抛出异常', () {
      final service = MusicService();
      
      expect(() => service.playMusic(MusicTheme.victory), returnsNormally);
    });

    test('播放经典主题不应抛出异常', () {
      final service = MusicService();
      
      expect(() => service.playMusic(MusicTheme.classic), returnsNormally);
    });

    test('播放夜间主题不应抛出异常', () {
      final service = MusicService();
      
      expect(() => service.playMusic(MusicTheme.night), returnsNormally);
    });

    test('播放轻松主题不应抛出异常', () {
      final service = MusicService();
      
      expect(() => service.playMusic(MusicTheme.relaxing), returnsNormally);
    });

    test('停止音乐不应抛出异常', () {
      final service = MusicService();
      
      expect(() => service.stopMusic(), returnsNormally);
    });

    test('暂停音乐不应抛出异常', () {
      final service = MusicService();
      
      expect(() => service.pauseMusic(), returnsNormally);
    });

    test('恢复音乐不应抛出异常', () {
      final service = MusicService();
      
      expect(() => service.resumeMusic(), returnsNormally);
    });
  });

  group('主题切换', () {
    test('切换主题不应抛出异常', () {
      final service = MusicService();
      
      expect(() => service.switchTheme(MusicTheme.gameplay), returnsNormally);
    });

    test('应该支持所有主题的切换', () {
      final service = MusicService();
      
      for (final theme in MusicTheme.values) {
        expect(() => service.switchTheme(theme), returnsNormally);
      }
    });
  });

  group('淡入淡出效果', () {
    test('淡入播放不应抛出异常', () {
      final service = MusicService();
      
      expect(
        () => service.fadeIn(MusicTheme.main, duration: const Duration(milliseconds: 100)),
        returnsNormally,
      );
    });

    test('淡出停止不应抛出异常', () {
      final service = MusicService();
      
      expect(
        () => service.fadeOut(duration: const Duration(milliseconds: 100)),
        returnsNormally,
      );
    });
  });

  group('综合测试', () {
    test('设置音量后播放音乐', () async {
      final service = MusicService();
      
      await service.setVolume(0.6);
      expect(() => service.playMusic(MusicTheme.main), returnsNormally);
      expect(service.getVolume(), 0.6);
    });

    test('禁用状态不影响音量设置', () async {
      final service = MusicService();
      
      await service.setVolume(0.7);
      await service.setEnabled(false);
      
      expect(service.getVolume(), 0.7);
      expect(service.isEnabled(), false);
    });

    test('连续切换不同主题', () {
      final service = MusicService();
      
      expect(() {
        service.switchTheme(MusicTheme.main);
        service.switchTheme(MusicTheme.gameplay);
        service.switchTheme(MusicTheme.victory);
      }, returnsNormally);
    });
  });
}
