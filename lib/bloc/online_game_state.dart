// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 定义在线对战状态

import 'package:equatable/equatable.dart';
import '../models/board_state.dart';
import '../models/move.dart';
import '../models/online_match.dart';
import '../models/piece_type.dart';

/// 在线对战状态基类
abstract class OnlineGameState extends Equatable {
  const OnlineGameState();

  @override
  List<Object?> get props => [];
}

/// 初始状态
class OnlineGameInitial extends OnlineGameState {
  const OnlineGameInitial();

  @override
  String toString() => 'OnlineGameInitial()';
}

/// 匹配中状态
class Matching extends OnlineGameState {
  final String playerId;
  final DateTime startTime;

  const Matching({
    required this.playerId,
    required this.startTime,
  });

  @override
  List<Object?> get props => [playerId, startTime];

  @override
  String toString() => 'Matching(playerId: $playerId)';
}

/// 匹配成功状态
class MatchFound extends OnlineGameState {
  final OnlineMatch match;
  final String localPlayerId;

  const MatchFound({
    required this.match,
    required this.localPlayerId,
  });

  /// 本地玩家颜色
  PieceType get localPlayerColor => match.getPlayerColor(localPlayerId)!;

  /// 对手ID
  String get opponentId => match.getOpponentId(localPlayerId)!;

  /// 是否是本地玩家回合
  bool get isLocalPlayerTurn => match.isPlayerTurn(localPlayerId);

  @override
  List<Object?> get props => [match, localPlayerId];

  @override
  String toString() => 'MatchFound(matchId: ${match.matchId})';
}

/// 在线游戏进行中状态
class OnlinePlaying extends OnlineGameState {
  final OnlineMatch match;
  final String localPlayerId;
  final BoardState boardState;
  final List<Move> moveHistory;
  final Move? lastMove;

  const OnlinePlaying({
    required this.match,
    required this.localPlayerId,
    required this.boardState,
    required this.moveHistory,
    this.lastMove,
  });

  /// 本地玩家颜色
  PieceType get localPlayerColor => match.getPlayerColor(localPlayerId)!;

  /// 对手ID
  String get opponentId => match.getOpponentId(localPlayerId)!;

  /// 是否是本地玩家回合
  bool get isLocalPlayerTurn => match.isPlayerTurn(localPlayerId);

  /// 当前玩家
  PieceType get currentPlayer => boardState.currentPlayer;

  /// 复制并修改部分字段
  OnlinePlaying copyWith({
    OnlineMatch? match,
    String? localPlayerId,
    BoardState? boardState,
    List<Move>? moveHistory,
    Move? lastMove,
    bool clearLastMove = false,
  }) {
    return OnlinePlaying(
      match: match ?? this.match,
      localPlayerId: localPlayerId ?? this.localPlayerId,
      boardState: boardState ?? this.boardState,
      moveHistory: moveHistory ?? this.moveHistory,
      lastMove: clearLastMove ? null : (lastMove ?? this.lastMove),
    );
  }

  @override
  List<Object?> get props => [
        match,
        localPlayerId,
        boardState,
        moveHistory,
        lastMove,
      ];

  @override
  String toString() =>
      'OnlinePlaying(matchId: ${match.matchId}, myTurn: $isLocalPlayerTurn)';
}

/// 等待对手移动状态
class WaitingOpponent extends OnlineGameState {
  final OnlineMatch match;
  final String localPlayerId;
  final BoardState boardState;
  final List<Move> moveHistory;

  const WaitingOpponent({
    required this.match,
    required this.localPlayerId,
    required this.boardState,
    required this.moveHistory,
  });

  @override
  List<Object?> get props => [match, localPlayerId, boardState, moveHistory];

  @override
  String toString() => 'WaitingOpponent(matchId: ${match.matchId})';
}

/// 对手断线状态
class OpponentDisconnected extends OnlineGameState {
  final OnlineMatch match;
  final String localPlayerId;
  final DateTime disconnectedAt;

  const OpponentDisconnected({
    required this.match,
    required this.localPlayerId,
    required this.disconnectedAt,
  });

  @override
  List<Object?> get props => [match, localPlayerId, disconnectedAt];

  @override
  String toString() => 'OpponentDisconnected(matchId: ${match.matchId})';
}

/// 在线游戏结束状态
class OnlineGameOver extends OnlineGameState {
  final OnlineMatch match;
  final String localPlayerId;
  final String winnerId;
  final String reason;
  final BoardState finalBoardState;
  final List<Move> moveHistory;

  const OnlineGameOver({
    required this.match,
    required this.localPlayerId,
    required this.winnerId,
    required this.reason,
    required this.finalBoardState,
    required this.moveHistory,
  });

  /// 是否本地玩家获胜
  bool get isLocalPlayerWin => winnerId == localPlayerId;

  @override
  List<Object?> get props => [
        match,
        localPlayerId,
        winnerId,
        reason,
        finalBoardState,
        moveHistory,
      ];

  @override
  String toString() =>
      'OnlineGameOver(winnerId: $winnerId, reason: $reason)';
}

/// 连接错误状态
class OnlineGameError extends OnlineGameState {
  final String message;
  final DateTime timestamp;

  const OnlineGameError({
    required this.message,
    required this.timestamp,
  });

  @override
  List<Object?> get props => [message, timestamp];

  @override
  String toString() => 'OnlineGameError(message: $message)';
}
