// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 实现移动验证器，验证移动是否符合游戏规则

import '../models/board_state.dart';
import '../models/position.dart';
import '../models/piece_type.dart';

/// 移动验证器
/// 
/// 负责验证移动是否合法，包括：
/// - 棋子所有权验证
/// - 目标位置验证
/// - 四方向相邻验证
/// - 边界验证
class MoveValidator {
  /// 判断移动是否合法
  /// 
  /// 验证规则：
  /// 1. from位置必须有当前玩家的棋子
  /// 2. to位置必须为空
  /// 3. from和to必须四方向相邻
  /// 4. 位置不能越界
  bool isValidMove(
    BoardState board,
    Position from,
    Position to,
  ) {
    // 检查位置是否在棋盘范围内
    if (!from.isValid() || !to.isValid()) {
      return false;
    }

    // 检查起始位置是否有当前玩家的棋子
    final piece = board.getPiece(from);
    if (piece != board.currentPlayer) {
      return false;
    }

    // 检查目标位置是否为空
    if (!board.isEmpty(to)) {
      return false;
    }

    // 检查是否四方向相邻
    if (!isAdjacent(from, to)) {
      return false;
    }

    return true;
  }

  /// 获取指定棋子的所有合法移动目标位置
  /// 
  /// 返回该棋子可以移动到的所有空位
  List<Position> getValidMoves(
    BoardState board,
    Position piece,
  ) {
    // 检查位置有效性
    if (!piece.isValid()) {
      return [];
    }

    // 检查是否为当前玩家的棋子
    final pieceType = board.getPiece(piece);
    if (pieceType != board.currentPlayer) {
      return [];
    }

    // 获取四方向相邻位置
    final adjacentPositions = piece.getAdjacentPositions();

    // 过滤出空位
    return adjacentPositions
        .where((pos) => board.isEmpty(pos))
        .toList();
  }

  /// 判断两个位置是否四方向相邻
  /// 
  /// 四方向定义：上、下、左、右
  /// 曼哈顿距离为1
  bool isAdjacent(Position from, Position to) {
    final distance = from.distanceTo(to);
    return distance == 1;
  }

  /// 获取当前玩家所有可能的移动
  /// 
  /// 返回一个Map，key为棋子位置，value为该棋子可移动的目标位置列表
  Map<Position, List<Position>> getAllPossibleMoves(
    BoardState board,
    PieceType player,
  ) {
    final result = <Position, List<Position>>{};

    // 获取当前玩家的所有棋子
    final pieces = board.getAllPieces(player);

    // 为每个棋子计算可移动位置
    for (final piece in pieces) {
      final moves = getValidMoves(board, piece);
      if (moves.isNotEmpty) {
        result[piece] = moves;
      }
    }

    return result;
  }

  /// 检查玩家是否还有可移动的棋子
  /// 
  /// 如果没有任何合法移动，游戏可能结束
  bool hasValidMoves(BoardState board, PieceType player) {
    final pieces = board.getAllPieces(player);

    for (final piece in pieces) {
      // 获取四方向相邻位置
      final adjacentPositions = piece.getAdjacentPositions();
      
      // 检查是否有空位
      for (final pos in adjacentPositions) {
        if (board.isEmpty(pos)) {
          return true;
        }
      }
    }

    return false;
  }
}
