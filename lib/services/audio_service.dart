// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 实现音频服务，管理游戏音效播放

import 'package:audioplayers/audioplayers.dart';

/// 音效类型
enum SoundType {
  /// 选中棋子
  select,
  
  /// 移动棋子
  move,
  
  /// 吃子
  capture,
  
  /// 胜利
  win,
  
  /// 失败
  lose,
  
  /// 按钮点击
  click,
}

/// 音频服务
/// 
/// 负责游戏音效的播放和管理
class AudioService {
  static final AudioService _instance = AudioService._internal();
  factory AudioService() => _instance;
  AudioService._internal();

  final Map<SoundType, AudioPlayer> _players = {};
  bool _enabled = true;
  double _volume = 0.7;

  /// 初始化音频服务
  Future<void> initialize() async {
    // 为每种音效创建独立的播放器
    for (final type in SoundType.values) {
      _players[type] = AudioPlayer();
      await _players[type]!.setVolume(_volume);
    }

    // 预加载音效文件
    await _preloadSounds();
  }

  /// 预加载所有音效
  Future<void> _preloadSounds() async {
    final soundFiles = {
      SoundType.select: 'sounds/select.mp3',
      SoundType.move: 'sounds/move.mp3',
      SoundType.capture: 'sounds/capture.mp3',
      SoundType.win: 'sounds/win.mp3',
      SoundType.lose: 'sounds/lose.mp3',
      SoundType.click: 'sounds/click.mp3',
    };

    for (final entry in soundFiles.entries) {
      try {
        await _players[entry.key]!.setSource(AssetSource(entry.value));
      } catch (e) {
        // 音效文件不存在时忽略错误
        print('Failed to load sound: ${entry.value}');
      }
    }
  }

  /// 播放音效
  void playSound(SoundType type) {
    if (!_enabled) return;

    final player = _players[type];
    if (player == null) return;

    // 停止当前播放并重新开始
    player.stop();
    player.resume();
  }

  /// 设置音效开关
  void setEnabled(bool enabled) {
    _enabled = enabled;
  }

  /// 获取音效开关状态
  bool isEnabled() => _enabled;

  /// 设置音量
  void setVolume(double volume) {
    _volume = volume.clamp(0.0, 1.0);
    for (final player in _players.values) {
      player.setVolume(_volume);
    }
  }

  /// 获取音量
  double getVolume() => _volume;

  /// 释放资源
  Future<void> dispose() async {
    for (final player in _players.values) {
      await player.dispose();
    }
    _players.clear();
  }
}
