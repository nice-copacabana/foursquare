// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 实现统一的日志服务

import 'package:flutter/foundation.dart';

/// 日志级别
enum LogLevel {
  /// 调试信息
  debug,
  
  /// 一般信息
  info,
  
  /// 警告信息
  warning,
  
  /// 错误信息
  error,
}

/// 日志服务
/// 
/// 提供统一的日志记录接口，替换所有print()调用
/// 
/// 功能：
/// - 分级日志（debug, info, warning, error）
/// - 开发/发布模式切换
/// - 可选的日志持久化
/// - 日志格式化输出
class Logger {
  static final Logger _instance = Logger._internal();
  factory Logger() => _instance;
  Logger._internal();

  /// 是否启用日志
  bool _enabled = kDebugMode;
  
  /// 最小日志级别
  LogLevel _minLevel = LogLevel.debug;
  
  /// 日志历史（保留最近100条）
  final List<_LogEntry> _history = [];
  static const int _maxHistorySize = 100;

  /// 设置是否启用日志
  void setEnabled(bool enabled) {
    _enabled = enabled;
  }

  /// 设置最小日志级别
  void setMinLevel(LogLevel level) {
    _minLevel = level;
  }

  /// 调试日志
  void debug(String message, [String? tag]) {
    _log(LogLevel.debug, message, tag);
  }

  /// 信息日志
  void info(String message, [String? tag]) {
    _log(LogLevel.info, message, tag);
  }

  /// 警告日志
  void warning(String message, [String? tag]) {
    _log(LogLevel.warning, message, tag);
  }

  /// 错误日志
  void error(String message, [String? tag, Object? error, StackTrace? stackTrace]) {
    final fullMessage = error != null 
        ? '$message: $error${stackTrace != null ? '\n$stackTrace' : ''}'
        : message;
    _log(LogLevel.error, fullMessage, tag);
  }

  /// 内部日志方法
  void _log(LogLevel level, String message, String? tag) {
    if (!_enabled) return;
    if (level.index < _minLevel.index) return;

    final timestamp = DateTime.now();
    final entry = _LogEntry(
      level: level,
      message: message,
      tag: tag,
      timestamp: timestamp,
    );

    // 添加到历史记录
    _addToHistory(entry);

    // 输出到控制台
    if (kDebugMode) {
      print(_formatLog(entry));
    }
  }

  /// 格式化日志输出
  String _formatLog(_LogEntry entry) {
    final time = '${entry.timestamp.hour.toString().padLeft(2, '0')}:'
                 '${entry.timestamp.minute.toString().padLeft(2, '0')}:'
                 '${entry.timestamp.second.toString().padLeft(2, '0')}';
    final levelStr = _getLevelString(entry.level);
    final tag = entry.tag != null ? '[${entry.tag}] ' : '';
    
    return '$time $levelStr $tag${entry.message}';
  }

  /// 获取日志级别字符串
  String _getLevelString(LogLevel level) {
    switch (level) {
      case LogLevel.debug:
        return '[DEBUG]';
      case LogLevel.info:
        return '[INFO ]';
      case LogLevel.warning:
        return '[WARN ]';
      case LogLevel.error:
        return '[ERROR]';
    }
  }

  /// 添加到历史记录
  void _addToHistory(_LogEntry entry) {
    _history.add(entry);
    if (_history.length > _maxHistorySize) {
      _history.removeAt(0);
    }
  }

  /// 获取日志历史
  List<String> getHistory({LogLevel? minLevel}) {
    return _history
        .where((entry) => minLevel == null || entry.level.index >= minLevel.index)
        .map((entry) => _formatLog(entry))
        .toList();
  }

  /// 清除日志历史
  void clearHistory() {
    _history.clear();
  }

  /// 获取日志统计
  Map<LogLevel, int> getStatistics() {
    final stats = <LogLevel, int>{};
    for (final level in LogLevel.values) {
      stats[level] = 0;
    }
    for (final entry in _history) {
      stats[entry.level] = (stats[entry.level] ?? 0) + 1;
    }
    return stats;
  }
}

/// 日志条目
class _LogEntry {
  final LogLevel level;
  final String message;
  final String? tag;
  final DateTime timestamp;

  _LogEntry({
    required this.level,
    required this.message,
    this.tag,
    required this.timestamp,
  });
}

/// 全局Logger实例
final logger = Logger();
