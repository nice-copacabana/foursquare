// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 创建在线对战匹配页面

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../bloc/online_game_bloc.dart';
import '../../bloc/online_game_event.dart';
import '../../bloc/online_game_state.dart';
import '../../models/piece_type.dart';

/// 在线对战匹配页面
/// 
/// 功能：
/// - 显示匹配进度动画
/// - 显示等待时间
/// - 提供取消匹配按钮
class MatchingPage extends StatelessWidget {
  final String playerId;

  const MatchingPage({
    super.key,
    required this.playerId,
  });

  @override
  Widget build(BuildContext context) {
    return BlocListener<OnlineGameBloc, OnlineGameState>(
      listener: (context, state) {
        if (state is MatchFound) {
          // 匹配成功，显示提示并等待进入游戏
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('匹配成功！准备开始游戏...'),
              duration: Duration(seconds: 2),
            ),
          );
        } else if (state is OnlinePlaying) {
          // 进入游戏页面
          Navigator.of(context).pushReplacementNamed(
            '/online-game',
            arguments: playerId,
          );
        } else if (state is OnlineGameError) {
          // 显示错误
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(state.message),
              backgroundColor: Colors.red,
            ),
          );
          Navigator.of(context).pop();
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: const Text('正在匹配对手'),
          centerTitle: true,
          automaticallyImplyLeading: false,
        ),
        body: BlocBuilder<OnlineGameBloc, OnlineGameState>(
          builder: (context, state) {
            if (state is Matching) {
              final elapsed = DateTime.now().difference(state.startTime);
              final seconds = elapsed.inSeconds;

              return Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // 匹配动画
                    const SizedBox(
                      width: 100,
                      height: 100,
                      child: CircularProgressIndicator(
                        strokeWidth: 6,
                      ),
                    ),
                    const SizedBox(height: 40),
                    
                    // 状态文本
                    const Text(
                      '正在寻找对手...',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    
                    // 等待时间
                    Text(
                      '已等待 $seconds 秒',
                      style: TextStyle(
                        fontSize: 16,
                        color: Colors.grey[600],
                      ),
                    ),
                    const SizedBox(height: 60),
                    
                    // 提示信息
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 32,
                        vertical: 16,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.blue.shade50,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Column(
                        children: [
                          const Icon(
                            Icons.info_outline,
                            color: Colors.blue,
                            size: 32,
                          ),
                          const SizedBox(height: 8),
                          Text(
                            '匹配过程可能需要一些时间\n请耐心等待',
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey[700],
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 40),
                    
                    // 取消按钮
                    ElevatedButton(
                      onPressed: () {
                        context.read<OnlineGameBloc>().add(
                              const CancelMatchingEvent(),
                            );
                        Navigator.of(context).pop();
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.grey,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 40,
                          vertical: 16,
                        ),
                      ),
                      child: const Text(
                        '取消匹配',
                        style: TextStyle(fontSize: 16),
                      ),
                    ),
                  ],
                ),
              );
            } else if (state is MatchFound) {
              return Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(
                      Icons.check_circle,
                      color: Colors.green,
                      size: 100,
                    ),
                    const SizedBox(height: 24),
                    const Text(
                      '匹配成功！',
                      style: TextStyle(
                        fontSize: 28,
                        fontWeight: FontWeight.bold,
                        color: Colors.green,
                      ),
                    ),
                    const SizedBox(height: 16),
                    Text(
                      '对手ID: ${state.opponentId}',
                      style: const TextStyle(fontSize: 16),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '你执${state.localPlayerColor.getDisplayName()}',
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    const SizedBox(height: 32),
                    const CircularProgressIndicator(),
                    const SizedBox(height: 16),
                    const Text('正在进入游戏...'),
                  ],
                ),
              );
            }

            return const Center(
              child: CircularProgressIndicator(),
            );
          },
        ),
      ),
    );
  }
}
