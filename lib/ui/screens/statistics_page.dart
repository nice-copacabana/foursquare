// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 实现游戏统计页面，展示总体统计、难度战绩、游戏数据等信息

/// Statistics Page - 游戏统计页面
/// 
/// 职责：
/// - 显示玩家游戏统计数据
/// - 包含总局数、胜率、难度战绩等
/// - 支持重置统计功能
library;

import 'package:flutter/material.dart';
import 'dart:math' as math;
import '../../services/storage_service.dart';
import '../widgets/statistics_charts.dart'; // 导入图表组件

/// 统计页面
class StatisticsPage extends StatefulWidget {
  const StatisticsPage({super.key});

  @override
  State<StatisticsPage> createState() => _StatisticsPageState();
}

class _StatisticsPageState extends State<StatisticsPage> {
  final StorageService _storageService = StorageService();
  GameStatistics? _statistics;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadStatistics();
  }

  Future<void> _loadStatistics() async {
    setState(() => _isLoading = true);
    final stats = await _storageService.loadStatistics();
    setState(() {
      _statistics = stats;
      _isLoading = false;
    });
  }

  Future<void> _resetStatistics() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('重置统计'),
        content: const Text('确定要清空所有统计数据吗？此操作无法撤销。'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('取消'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('重置'),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      await _storageService.resetStatistics();
      _loadStatistics();
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('统计数据已重置')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade100,
      appBar: AppBar(
        title: const Text('游戏统计'),
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadStatistics,
            tooltip: '刷新',
          ),
          IconButton(
            icon: const Icon(Icons.delete_outline),
            onPressed: _resetStatistics,
            tooltip: '重置统计',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _statistics == null || _statistics!.totalGames == 0
              ? _buildEmptyState()
              : _buildStatisticsContent(),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.bar_chart_outlined,
            size: 80,
            color: Colors.grey.shade400,
          ),
          const SizedBox(height: 16),
          Text(
            '还没有游戏记录',
            style: TextStyle(
              fontSize: 20,
              color: Colors.grey.shade600,
              fontWeight: FontWeight.w500,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            '开始你的第一局游戏吧！',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey.shade500,
            ),
          ),
          const SizedBox(height: 32),
          ElevatedButton.icon(
            onPressed: () => Navigator.pop(context),
            icon: const Icon(Icons.play_arrow),
            label: const Text('开始游戏'),
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatisticsContent() {
    return RefreshIndicator(
      onRefresh: _loadStatistics,
      child: SingleChildScrollView(
        physics: const AlwaysScrollableScrollPhysics(),
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            _buildOverallStatsCard(),
            const SizedBox(height: 16),
            _buildWinRateCard(),
            const SizedBox(height: 16),
            _buildWinRateTrendCard(), // 新增：胜率趋势图
            const SizedBox(height: 16),
            _buildTimeDistributionCard(), // 新增：时间分布图
            const SizedBox(height: 16),
            _buildDifficultyStatsCard(),
            const SizedBox(height: 16),
            _buildGameDataCard(),
          ],
        ),
      ),
    );
  }

  Widget _buildOverallStatsCard() {
    final stats = _statistics!;
    return _StatCard(
      title: '总体统计',
      icon: Icons.assessment,
      color: Colors.blue,
      children: [
        Row(
          children: [
            Expanded(
              child: _StatItem(
                label: '总局数',
                value: '${stats.totalGames}',
                icon: Icons.games,
              ),
            ),
            Expanded(
              child: _StatItem(
                label: '连胜记录',
                value: '${stats.maxWinStreak}',
                icon: Icons.emoji_events,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: _StatItem(
                label: '胜',
                value: '${stats.wins}',
                valueColor: Colors.green,
                icon: Icons.check_circle,
              ),
            ),
            Expanded(
              child: _StatItem(
                label: '负',
                value: '${stats.losses}',
                valueColor: Colors.red,
                icon: Icons.cancel,
              ),
            ),
            Expanded(
              child: _StatItem(
                label: '平',
                value: '${stats.draws}',
                valueColor: Colors.orange,
                icon: Icons.remove_circle,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildWinRateCard() {
    final stats = _statistics!;
    final winRate = stats.winRate * 100;
    
    return _StatCard(
      title: '胜率分析',
      icon: Icons.pie_chart,
      color: Colors.purple,
      children: [
        Center(
          child: _CircularProgress(
            percentage: winRate,
            label: '胜率',
            color: _getWinRateColor(winRate),
          ),
        ),
        const SizedBox(height: 16),
        if (stats.winStreak > 0)
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.amber.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.amber),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(Icons.local_fire_department, color: Colors.amber),
                const SizedBox(width: 8),
                Text(
                  '当前连胜 ${stats.winStreak} 局',
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.amber,
                  ),
                ),
              ],
            ),
          ),
      ],
    );
  }

  Widget _buildDifficultyStatsCard() {
    final stats = _statistics!;
    final difficulties = ['easy', 'medium', 'hard'];
    final difficultyNames = {'easy': '简单', 'medium': '中等', 'hard': '困难'};
    final difficultyColors = {
      'easy': Colors.green,
      'medium': Colors.orange,
      'hard': Colors.red,
    };

    return _StatCard(
      title: '难度战绩',
      icon: Icons.trending_up,
      color: Colors.orange,
      children: difficulties.map((difficulty) {
        final wins = stats.difficultyWins[difficulty] ?? 0;
        return Padding(
          padding: const EdgeInsets.only(bottom: 12),
          child: Row(
            children: [
              Icon(
                Icons.emoji_events,
                color: difficultyColors[difficulty],
                size: 20,
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  difficultyNames[difficulty]!,
                  style: const TextStyle(fontSize: 16),
                ),
              ),
              Text(
                '$wins 胜',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: difficultyColors[difficulty],
                ),
              ),
            ],
          ),
        );
      }).toList(),
    );
  }

  Widget _buildGameDataCard() {
    final stats = _statistics!;
    final avgMoves = stats.totalGames > 0 
        ? (stats.totalMoves / stats.totalGames).toStringAsFixed(1)
        : '0';

    return _StatCard(
      title: '游戏数据',
      icon: Icons.data_usage,
      color: Colors.teal,
      children: [
        _StatItem(
          label: '平均步数',
          value: avgMoves,
          subtitle: '每局',
          icon: Icons.directions_walk,
        ),
        const SizedBox(height: 12),
        _StatItem(
          label: '总吃子数',
          value: '${stats.totalCaptures}',
          icon: Icons.close,
        ),
        const SizedBox(height: 12),
        if (stats.lastPlayedAt != null)
          _StatItem(
            label: '最后游戏',
            value: _formatDateTime(stats.lastPlayedAt!),
            icon: Icons.access_time,
          ),
      ],
    );
  }

  /// 构建胜率趋势图卡片
  Widget _buildWinRateTrendCard() {
    final stats = _statistics!;
    
    // 转换每日胜率数据
    final winRateData = <DateTime, double>{};
    stats.dailyWinRate.forEach((dateStr, rate) {
      try {
        final date = DateTime.parse(dateStr);
        winRateData[date] = rate;
      } catch (e) {
        // 忽略无效日期
      }
    });

    return _StatCard(
      title: '胜率趋势',
      icon: Icons.show_chart,
      color: Colors.blue,
      children: [
        WinRateTrendChart(winRateData: winRateData),
      ],
    );
  }

  /// 构建时间分布图卡片
  Widget _buildTimeDistributionCard() {
    final stats = _statistics!;
    
    // 转换每小时游戏数据
    final timeDistribution = <int, int>{};
    stats.hourlyGames.forEach((hourStr, count) {
      try {
        final hour = int.parse(hourStr);
        if (hour >= 0 && hour < 24) {
          timeDistribution[hour] = count;
        }
      } catch (e) {
        // 忽略无效小时
      }
    });

    return _StatCard(
      title: '游戏时间分布',
      icon: Icons.access_time,
      color: Colors.indigo,
      children: [
        GameTimeDistributionChart(timeDistribution: timeDistribution),
      ],
    );
  }

  Color _getWinRateColor(double winRate) {
    if (winRate >= 70) return Colors.green;
    if (winRate >= 50) return Colors.blue;
    if (winRate >= 30) return Colors.orange;
    return Colors.red;
  }

  String _formatDateTime(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);

    if (difference.inDays == 0) {
      return '今天';
    } else if (difference.inDays == 1) {
      return '昨天';
    } else if (difference.inDays < 7) {
      return '${difference.inDays}天前';
    } else {
      return '${dateTime.month}/${dateTime.day}';
    }
  }
}

/// 统计卡片组件
class _StatCard extends StatelessWidget {
  final String title;
  final IconData icon;
  final Color color;
  final List<Widget> children;

  const _StatCard({
    required this.title,
    required this.icon,
    required this.color,
    required this.children,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            color.withOpacity(0.1),
            color.withOpacity(0.05),
          ],
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: color.withOpacity(0.3)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(icon, color: color, size: 24),
                const SizedBox(width: 12),
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: color,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            ...children,
          ],
        ),
      ),
    );
  }
}

/// 统计项组件
class _StatItem extends StatelessWidget {
  final String label;
  final String value;
  final String? subtitle;
  final Color? valueColor;
  final IconData? icon;

  const _StatItem({
    required this.label,
    required this.value,
    this.subtitle,
    this.valueColor,
    this.icon,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        if (icon != null) ...[
          Icon(icon, size: 20, color: Colors.grey.shade600),
          const SizedBox(width: 8),
        ],
        Expanded(
          child: Text(
            label,
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey.shade700,
            ),
          ),
        ),
        Column(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Text(
              value,
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: valueColor ?? Colors.black87,
              ),
            ),
            if (subtitle != null)
              Text(
                subtitle!,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey.shade500,
                ),
              ),
          ],
        ),
      ],
    );
  }
}

/// 圆形进度指示器组件
class _CircularProgress extends StatelessWidget {
  final double percentage;
  final String label;
  final Color color;

  const _CircularProgress({
    required this.percentage,
    required this.label,
    required this.color,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: 120,
      height: 120,
      child: CustomPaint(
        painter: _CircularProgressPainter(
          percentage: percentage,
          color: color,
        ),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                '${percentage.toStringAsFixed(1)}%',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: color,
                ),
              ),
              Text(
                label,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey.shade600,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

/// 圆形进度绘制器
class _CircularProgressPainter extends CustomPainter {
  final double percentage;
  final Color color;

  _CircularProgressPainter({
    required this.percentage,
    required this.color,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(size.width / 2, size.height / 2);
    final radius = size.width / 2;

    // 背景圆环
    final bgPaint = Paint()
      ..color = Colors.grey.shade200
      ..style = PaintingStyle.stroke
      ..strokeWidth = 12
      ..strokeCap = StrokeCap.round;

    canvas.drawCircle(center, radius - 6, bgPaint);

    // 进度圆环
    final progressPaint = Paint()
      ..color = color
      ..style = PaintingStyle.stroke
      ..strokeWidth = 12
      ..strokeCap = StrokeCap.round;

    final sweepAngle = 2 * math.pi * (percentage / 100);
    canvas.drawArc(
      Rect.fromCircle(center: center, radius: radius - 6),
      -math.pi / 2,
      sweepAngle,
      false,
      progressPaint,
    );
  }

  @override
  bool shouldRepaint(_CircularProgressPainter oldDelegate) {
    return oldDelegate.percentage != percentage || oldDelegate.color != color;
  }
}
