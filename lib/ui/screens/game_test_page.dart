// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 创建可交互的游戏测试页面，验证UI组件和游戏逻辑

import 'package:flutter/material.dart';
import '../../models/board_state.dart';
import '../../models/position.dart';
import '../../models/piece_type.dart';
import '../../models/move.dart';
import '../../engine/game_engine.dart';
import '../../engine/move_validator.dart';
import '../widgets/board_widget.dart';

/// 游戏测试页面
/// 
/// 功能：
/// - 显示可交互的棋盘
/// - 支持点击选择和移动棋子
/// - 显示游戏状态和历史
/// - 测试UI响应性
class GameTestPage extends StatefulWidget {
  const GameTestPage({super.key});

  @override
  State<GameTestPage> createState() => _GameTestPageState();
}

class _GameTestPageState extends State<GameTestPage> {
  late GameEngine _engine;
  late MoveValidator _validator;
  late BoardState _board;
  
  Position? _selectedPiece;
  List<Position> _validMoves = [];
  Move? _lastMove;
  
  final List<String> _logs = [];

  @override
  void initState() {
    super.initState();
    _initGame();
  }

  void _initGame() {
    _engine = GameEngine();
    _validator = MoveValidator();
    _board = BoardState.initial();
    _selectedPiece = null;
    _validMoves = [];
    _lastMove = null;
    _logs.clear();
    
    _engine.startNewGame();
    _addLog('游戏开始！黑方先手');
  }

  void _addLog(String message) {
    setState(() {
      _logs.insert(0, '[${_formatTime()}] $message');
      if (_logs.length > 50) {
        _logs.removeLast();
      }
    });
  }

  String _formatTime() {
    final now = DateTime.now();
    return '${now.hour.toString().padLeft(2, '0')}:'
           '${now.minute.toString().padLeft(2, '0')}:'
           '${now.second.toString().padLeft(2, '0')}';
  }

  void _handlePositionTapped(Position pos) {
    final piece = _board.getPiece(pos);
    
    // 如果点击的是当前玩家的棋子，选中它
    if (piece == _board.currentPlayer) {
      setState(() {
        _selectedPiece = pos;
        _validMoves = _validator.getValidMoves(_board, pos);
      });
      _addLog('选中 ${piece.getDisplayName()} 棋子 $pos');
    }
    // 如果已选中棋子，且点击的是合法移动位置，执行移动
    else if (_selectedPiece != null && _validMoves.contains(pos)) {
      _executeMove(_selectedPiece!, pos);
    }
    // 否则取消选中
    else {
      setState(() {
        _selectedPiece = null;
        _validMoves = [];
      });
      if (piece != PieceType.empty) {
        _addLog('不能移动对方棋子');
      }
    }
  }

  void _executeMove(Position from, Position to) {
    final result = _engine.executeMove(_board, from, to);
    
    if (result.success && result.newBoard != null) {
      setState(() {
        _board = result.newBoard!;
        _lastMove = result.move;
        _selectedPiece = null;
        _validMoves = [];
      });
      
      _addLog('✓ ${result.move!.player.getDisplayName()} 移动: $from → $to');
      
      if (result.captured != null) {
        _addLog('  ⭐ 吃子! 移除 ${result.captured}');
      }
      
      if (result.gameOver && result.gameResult != null) {
        _showGameOverDialog(result.gameResult!);
      }
    } else {
      _addLog('✗ 移动失败: ${result.error}');
    }
  }

  void _showGameOverDialog(dynamic gameResult) {
    _addLog('━━━ 游戏结束 ━━━');
    _addLog(gameResult.status.getDisplayText());
    
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('游戏结束'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              gameResult.status.getDisplayText(),
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            if (gameResult.winner != null)
              Text('获胜方: ${gameResult.winner!.getDisplayName()}'),
            Text('原因: ${gameResult.reason}'),
            Text('总步数: ${gameResult.moveCount}'),
            Text('用时: ${_formatDuration(gameResult.duration)}'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              setState(() {
                _initGame();
              });
            },
            child: const Text('再来一局'),
          ),
        ],
      ),
    );
  }

  String _formatDuration(Duration duration) {
    final minutes = duration.inMinutes;
    final seconds = duration.inSeconds % 60;
    return '$minutes分$seconds秒';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('四子游戏'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () {
              setState(() {
                _initGame();
              });
            },
            tooltip: '重新开始',
          ),
        ],
      ),
      body: SafeArea(
        child: LayoutBuilder(
          builder: (context, constraints) {
            // 响应式布局：横屏和竖屏不同布局
            if (constraints.maxWidth > 600) {
              return _buildLandscapeLayout();
            } else {
              return _buildPortraitLayout();
            }
          },
        ),
      ),
    );
  }

  /// 竖屏布局
  Widget _buildPortraitLayout() {
    return Column(
      children: [
        // 顶部玩家信息
        _buildPlayerInfo(isTop: true),
        
        const SizedBox(height: 20),
        
        // 棋盘
        Expanded(
          child: Center(
            child: BoardWidget(
              boardState: _board,
              selectedPiece: _selectedPiece,
              validMoves: _validMoves,
              lastMoveFrom: _lastMove?.from,
              lastMoveTo: _lastMove?.to,
              onPositionTapped: _handlePositionTapped,
            ),
          ),
        ),
        
        const SizedBox(height: 20),
        
        // 底部玩家信息
        _buildPlayerInfo(isTop: false),
        
        // 操作日志
        _buildLogPanel(),
      ],
    );
  }

  /// 横屏布局
  Widget _buildLandscapeLayout() {
    return Row(
      children: [
        // 左侧：棋盘
        Expanded(
          flex: 2,
          child: Column(
            children: [
              _buildPlayerInfo(isTop: true),
              Expanded(
                child: Center(
                  child: BoardWidget(
                    boardState: _board,
                    selectedPiece: _selectedPiece,
                    validMoves: _validMoves,
                    lastMoveFrom: _lastMove?.from,
                    lastMoveTo: _lastMove?.to,
                    onPositionTapped: _handlePositionTapped,
                  ),
                ),
              ),
              _buildPlayerInfo(isTop: false),
            ],
          ),
        ),
        
        // 右侧：日志
        Expanded(
          flex: 1,
          child: _buildLogPanel(),
        ),
      ],
    );
  }

  /// 玩家信息栏
  Widget _buildPlayerInfo({required bool isTop}) {
    final player = isTop ? PieceType.black : PieceType.white;
    final isCurrent = _board.currentPlayer == player;
    final pieceCount = _board.getPieceCount(player);
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      color: isCurrent ? Colors.amber.withValues(alpha: 0.3) : Colors.transparent,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Row(
            children: [
              Container(
                width: 30,
                height: 30,
                decoration: BoxDecoration(
                  color: player == PieceType.black ? Colors.black : Colors.white,
                  shape: BoxShape.circle,
                  border: Border.all(color: Colors.grey, width: 2),
                ),
              ),
              const SizedBox(width: 10),
              Text(
                player.getDisplayName(),
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: isCurrent ? FontWeight.bold : FontWeight.normal,
                ),
              ),
            ],
          ),
          Text(
            '剩余: $pieceCount 枚',
            style: TextStyle(
              fontSize: 16,
              fontWeight: isCurrent ? FontWeight.bold : FontWeight.normal,
            ),
          ),
        ],
      ),
    );
  }

  /// 日志面板
  Widget _buildLogPanel() {
    return Container(
      height: 150,
      padding: const EdgeInsets.all(10),
      color: Colors.grey[100],
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '操作日志',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const Divider(),
          Expanded(
            child: ListView.builder(
              itemCount: _logs.length,
              itemBuilder: (context, index) {
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 2),
                  child: Text(
                    _logs[index],
                    style: const TextStyle(
                      fontSize: 12,
                      fontFamily: 'monospace',
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
