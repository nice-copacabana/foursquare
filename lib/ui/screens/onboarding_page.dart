// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 实现首次使用引导流程

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../constants/ui_constants.dart';
import '../../constants/storage_constants.dart';

/// 引导页面
class OnboardingPage extends StatefulWidget {
  const OnboardingPage({super.key});

  @override
  State<OnboardingPage> createState() => _OnboardingPageState();
}

class _OnboardingPageState extends State<OnboardingPage> {
  final PageController _pageController = PageController();
  int _currentPage = 0;

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            // 跳过按钮
            if (_currentPage == 0)
              Align(
                alignment: Alignment.topRight,
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: TextButton(
                    onPressed: _completeOnboarding,
                    child: const Text('跳过'),
                  ),
                ),
              )
            else
              const SizedBox(height: 56),

            // 页面内容
            Expanded(
              child: PageView(
                controller: _pageController,
                onPageChanged: (index) {
                  setState(() {
                    _currentPage = index;
                  });
                },
                children: const [
                  _WelcomePage(),
                  _RulesBoardPage(),
                  _RulesMovementPage(),
                  _RulesCapturePage(),
                  _FeaturesPage(),
                ],
              ),
            ),

            // 页面指示器
            _PageIndicator(
              currentPage: _currentPage,
              pageCount: 5,
            ),

            // 导航按钮
            Padding(
              padding: UIConstants.paddingLarge,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  // 上一页按钮
                  if (_currentPage > 0)
                    TextButton.icon(
                      onPressed: () {
                        _pageController.previousPage(
                          duration: UIConstants.pageTransitionDuration,
                          curve: Curves.easeInOut,
                        );
                      },
                      icon: const Icon(Icons.arrow_back),
                      label: const Text('上一页'),
                    )
                  else
                    const SizedBox(width: 100),

                  // 下一页/开始按钮
                  ElevatedButton(
                    onPressed: () {
                      if (_currentPage < 4) {
                        _pageController.nextPage(
                          duration: UIConstants.pageTransitionDuration,
                          curve: Curves.easeInOut,
                        );
                      } else {
                        _completeOnboarding();
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 32,
                        vertical: 16,
                      ),
                    ),
                    child: Text(_currentPage < 4 ? '下一页' : '开始游戏'),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _completeOnboarding() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(StorageConstants.keyFirstLaunch, false);
    
    if (mounted) {
      Navigator.of(context).pushReplacementNamed('/home');
    }
  }
}

/// 页面指示器
class _PageIndicator extends StatelessWidget {
  final int currentPage;
  final int pageCount;

  const _PageIndicator({
    required this.currentPage,
    required this.pageCount,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: List.generate(
        pageCount,
        (index) => Container(
          margin: const EdgeInsets.symmetric(horizontal: 4),
          width: currentPage == index ? 24 : 8,
          height: 8,
          decoration: BoxDecoration(
            color: currentPage == index
                ? Theme.of(context).primaryColor
                : Colors.grey.shade300,
            borderRadius: BorderRadius.circular(4),
          ),
        ),
      ),
    );
  }
}

/// 欢迎页
class _WelcomePage extends StatelessWidget {
  const _WelcomePage();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: UIConstants.paddingLarge,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Logo占位
          Container(
            width: 200,
            height: 200,
            decoration: BoxDecoration(
              color: Theme.of(context).primaryColor.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(UIConstants.borderRadiusLarge),
            ),
            child: Icon(
              Icons.grid_4x4,
              size: 120,
              color: Theme.of(context).primaryColor,
            ),
          ),
          const SizedBox(height: 32),
          Text(
            '四子游戏',
            style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
          ),
          const SizedBox(height: 16),
          Text(
            '策略对弈，智胜四方',
            style: Theme.of(context).textTheme.titleMedium?.copyWith(
                  color: Colors.grey.shade600,
                ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 48),
          Text(
            '欢迎来到四子游戏！\n让我们快速了解游戏规则',
            style: Theme.of(context).textTheme.bodyLarge,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}

/// 棋盘介绍页
class _RulesBoardPage extends StatelessWidget {
  const _RulesBoardPage();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: UIConstants.paddingLarge,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            '棋盘与棋子',
            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
          ),
          const SizedBox(height: 32),
          
          // 棋盘示意图
          Container(
            width: 240,
            height: 240,
            decoration: BoxDecoration(
              color: UIConstants.boardBackgroundColor,
              borderRadius: BorderRadius.circular(UIConstants.borderRadiusLarge),
              boxShadow: [UIConstants.boardShadow],
            ),
            child: CustomPaint(
              painter: _BoardDemoPainter(),
            ),
          ),
          
          const SizedBox(height: 32),
          _InfoCard(
            icon: Icons.grid_on,
            title: '4×4 棋盘',
            description: '游戏在一个4×4的棋盘上进行',
          ),
          const SizedBox(height: 16),
          _InfoCard(
            icon: Icons.circle,
            title: '黑白各4子',
            description: '黑方和白方各有4枚棋子',
          ),
        ],
      ),
    );
  }
}

/// 移动规则页
class _RulesMovementPage extends StatelessWidget {
  const _RulesMovementPage();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: UIConstants.paddingLarge,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            '移动规则',
            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
          ),
          const SizedBox(height: 32),
          
          // 移动示意图
          Container(
            width: 200,
            height: 200,
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.circular(UIConstants.borderRadiusLarge),
            ),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    _DirectionArrow(Icons.arrow_upward),
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    _DirectionArrow(Icons.arrow_back),
                    const SizedBox(width: 16),
                    Container(
                      width: 40,
                      height: 40,
                      decoration: const BoxDecoration(
                        color: Colors.black,
                        shape: BoxShape.circle,
                      ),
                    ),
                    const SizedBox(width: 16),
                    _DirectionArrow(Icons.arrow_forward),
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    _DirectionArrow(Icons.arrow_downward),
                  ],
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 32),
          _InfoCard(
            icon: Icons.arrow_upward,
            title: '上下左右移动',
            description: '棋子只能移动到相邻的空位',
          ),
          const SizedBox(height: 16),
          _InfoCard(
            icon: Icons.block,
            title: '不能斜向移动',
            description: '斜向移动是不允许的',
          ),
        ],
      ),
    );
  }
}

/// 吃子规则页
class _RulesCapturePage extends StatelessWidget {
  const _RulesCapturePage();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: UIConstants.paddingLarge,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            '吃子规则',
            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
          ),
          const SizedBox(height: 32),
          
          // 吃子示意图
          Container(
            width: 240,
            height: 120,
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.circular(UIConstants.borderRadiusLarge),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildPiece(Colors.black),
                _buildPiece(Colors.black),
                _buildPiece(Colors.black),
                Icon(Icons.arrow_forward, color: Colors.red.shade400, size: 32),
                _buildPiece(Colors.white, opacity: 0.3),
              ],
            ),
          ),
          
          const SizedBox(height: 32),
          _InfoCard(
            icon: Icons.filter_3,
            title: '三子连线',
            description: '当己方三个棋子连成一线时',
          ),
          const SizedBox(height: 16),
          _InfoCard(
            icon: Icons.close,
            title: '吃掉最远端敌子',
            description: '可以吃掉对方距离最远的一个棋子',
          ),
        ],
      ),
    );
  }

  Widget _buildPiece(Color color, {double opacity = 1.0}) {
    return Container(
      width: 32,
      height: 32,
      decoration: BoxDecoration(
        color: color.withValues(alpha: opacity),
        shape: BoxShape.circle,
        border: Border.all(
          color: Colors.grey.shade400,
          width: 2,
        ),
      ),
    );
  }
}

/// 功能亮点页
class _FeaturesPage extends StatelessWidget {
  const _FeaturesPage();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: UIConstants.paddingLarge,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            '功能特色',
            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
          ),
          const SizedBox(height: 32),
          
          _FeatureCard(
            icon: Icons.smart_toy,
            title: 'AI对战',
            description: '3种难度的AI陪你练习',
            color: Colors.blue,
          ),
          const SizedBox(height: 16),
          _FeatureCard(
            icon: Icons.replay,
            title: '游戏回放',
            description: '回顾每一步精彩对局',
            color: Colors.green,
          ),
          const SizedBox(height: 16),
          _FeatureCard(
            icon: Icons.palette,
            title: '多种主题',
            description: '个性化你的游戏界面',
            color: Colors.purple,
          ),
          const SizedBox(height: 16),
          _FeatureCard(
            icon: Icons.bar_chart,
            title: '战绩统计',
            description: '查看你的游戏数据',
            color: Colors.orange,
          ),
        ],
      ),
    );
  }
}

/// 信息卡片
class _InfoCard extends StatelessWidget {
  final IconData icon;
  final String title;
  final String description;

  const _InfoCard({
    required this.icon,
    required this.title,
    required this.description,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(UIConstants.borderRadiusMedium),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Icon(icon, size: 32, color: Theme.of(context).primaryColor),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey.shade600,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

/// 功能卡片
class _FeatureCard extends StatelessWidget {
  final IconData icon;
  final String title;
  final String description;
  final Color color;

  const _FeatureCard({
    required this.icon,
    required this.title,
    required this.description,
    required this.color,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(UIConstants.borderRadiusMedium),
        border: Border.all(color: color.withValues(alpha: 0.3)),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: color,
              borderRadius: BorderRadius.circular(UIConstants.borderRadiusSmall),
            ),
            child: Icon(icon, size: 24, color: Colors.white),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey.shade600,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

/// 方向箭头
class _DirectionArrow extends StatelessWidget {
  final IconData icon;

  const _DirectionArrow(this.icon);

  @override
  Widget build(BuildContext context) {
    return Icon(
      icon,
      size: 32,
      color: Colors.green.shade400,
    );
  }
}

/// 棋盘演示绘制器
class _BoardDemoPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final cellSize = size.width / 4;
    
    // 绘制网格
    final gridPaint = Paint()
      ..color = UIConstants.boardGridColor
      ..strokeWidth = UIConstants.gridLineWidth
      ..style = PaintingStyle.stroke;

    for (var i = 0; i <= 4; i++) {
      // 横线
      canvas.drawLine(
        Offset(0, i * cellSize),
        Offset(size.width, i * cellSize),
        gridPaint,
      );
      // 竖线
      canvas.drawLine(
        Offset(i * cellSize, 0),
        Offset(i * cellSize, size.height),
        gridPaint,
      );
    }

    // 绘制初始棋子
    final positions = [
      // 黑方
      (0, 0, Colors.black),
      (1, 0, Colors.black),
      (2, 0, Colors.black),
      (3, 0, Colors.black),
      // 白方
      (0, 3, Colors.white),
      (1, 3, Colors.white),
      (2, 3, Colors.white),
      (3, 3, Colors.white),
    ];

    for (final (x, y, color) in positions) {
      final center = Offset(
        x * cellSize + cellSize / 2,
        y * cellSize + cellSize / 2,
      );
      final radius = cellSize * 0.3;

      final piecePaint = Paint()
        ..color = color
        ..style = PaintingStyle.fill;

      canvas.drawCircle(center, radius, piecePaint);

      final borderPaint = Paint()
        ..color = color == Colors.black ? Colors.white : Colors.black
        ..strokeWidth = 1.5
        ..style = PaintingStyle.stroke;

      canvas.drawCircle(center, radius, borderPaint);
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}
