// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 创建在线对战游戏页面（基础框架）

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../bloc/online_game_bloc.dart';
import '../../bloc/online_game_event.dart';
import '../../bloc/online_game_state.dart';
import '../../models/piece_type.dart';

/// 在线对战游戏页面
/// 
/// 功能：
/// - 显示在线对战棋盘
/// - 显示对手信息和连接状态
/// - 处理在线移动逻辑
/// - 显示游戏结果
/// 
/// 注意：这是基础框架版本，实际棋盘组件需要复用现有的BoardWidget
class OnlineGamePage extends StatelessWidget {
  final String playerId;

  const OnlineGamePage({
    super.key,
    required this.playerId,
  });

  @override
  Widget build(BuildContext context) {
    return BlocListener<OnlineGameBloc, OnlineGameState>(
      listener: (context, state) {
        if (state is OnlineGameOver) {
          _showGameOverDialog(context, state);
        } else if (state is OpponentDisconnected) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('对手已断线'),
              backgroundColor: Colors.orange,
            ),
          );
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: const Text('在线对战'),
          centerTitle: true,
          actions: [
            IconButton(
              icon: const Icon(Icons.exit_to_app),
              onPressed: () {
                _showExitConfirmDialog(context);
              },
            ),
          ],
        ),
        body: BlocBuilder<OnlineGameBloc, OnlineGameState>(
          builder: (context, state) {
            if (state is OnlinePlaying) {
              return _buildPlayingView(context, state);
            } else if (state is WaitingOpponent) {
              return _buildWaitingView(context, state);
            } else if (state is OpponentDisconnected) {
              return _buildDisconnectedView(context, state);
            }

            return const Center(
              child: CircularProgressIndicator(),
            );
          },
        ),
      ),
    );
  }

  /// 构建游戏进行中视图
  Widget _buildPlayingView(BuildContext context, OnlinePlaying state) {
    return Column(
      children: [
        // 对手信息栏
        _buildOpponentInfo(context, state),
        
        const Divider(height: 1),
        
        // 棋盘区域（这里使用占位符，实际需要集成BoardWidget）
        Expanded(
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(
                  Icons.grid_4x4,
                  size: 200,
                  color: Colors.grey,
                ),
                const SizedBox(height: 16),
                Text(
                  state.isLocalPlayerTurn ? '你的回合' : '对手回合',
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '匹配ID: ${state.match.matchId}',
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey[600],
                  ),
                ),
                const SizedBox(height: 24),
                const Text(
                  '注意：棋盘组件待集成\n实际应用中会显示可交互的棋盘',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.orange,
                  ),
                ),
              ],
            ),
          ),
        ),
        
        const Divider(height: 1),
        
        // 本地玩家信息栏
        _buildLocalPlayerInfo(context, state),
      ],
    );
  }

  /// 构建等待对手视图
  Widget _buildWaitingView(BuildContext context, WaitingOpponent state) {
    return Column(
      children: [
        _buildOpponentInfo(context, state),
        const Divider(height: 1),
        Expanded(
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const CircularProgressIndicator(),
                const SizedBox(height: 24),
                const Text(
                  '等待对手移动...',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '对局ID: ${state.match.matchId}',
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey[600],
                  ),
                ),
              ],
            ),
          ),
        ),
        const Divider(height: 1),
        _buildLocalPlayerInfoFromMatch(context, state.match, state.localPlayerId),
      ],
    );
  }

  /// 构建断线视图
  Widget _buildDisconnectedView(BuildContext context, OpponentDisconnected state) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(
            Icons.wifi_off,
            size: 100,
            color: Colors.orange,
          ),
          const SizedBox(height: 24),
          const Text(
            '对手已断线',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          Text(
            '断线时间: ${state.disconnectedAt.hour}:${state.disconnectedAt.minute}',
            style: TextStyle(
              fontSize: 16,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 32),
          ElevatedButton(
            onPressed: () {
              context.read<OnlineGameBloc>().add(const ExitOnlineGameEvent());
              Navigator.of(context).pop();
            },
            child: const Text('返回主菜单'),
          ),
        ],
      ),
    );
  }

  /// 构建对手信息栏
  Widget _buildOpponentInfo(BuildContext context, dynamic state) {
    String opponentId = '';
    PieceType opponentColor = PieceType.white;
    
    if (state is OnlinePlaying) {
      opponentId = state.opponentId;
      opponentColor = state.localPlayerColor == PieceType.black 
          ? PieceType.white 
          : PieceType.black;
    } else if (state is WaitingOpponent) {
      opponentId = state.match.getOpponentId(state.localPlayerId) ?? '';
      opponentColor = state.match.getPlayerColor(state.localPlayerId) == PieceType.black
          ? PieceType.white
          : PieceType.black;
    }

    return Container(
      padding: const EdgeInsets.all(16),
      color: Colors.grey[100],
      child: Row(
        children: [
          Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
              color: opponentColor == PieceType.black ? Colors.black : Colors.white,
              shape: BoxShape.circle,
              border: Border.all(color: Colors.grey[300]!, width: 2),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '对手 (${opponentColor.getDisplayName()})',
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  'ID: $opponentId',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey[600],
                  ),
                ),
              ],
            ),
          ),
          const Icon(
            Icons.circle,
            color: Colors.green,
            size: 16,
          ),
        ],
      ),
    );
  }

  /// 构建本地玩家信息栏
  Widget _buildLocalPlayerInfo(BuildContext context, OnlinePlaying state) {
    return Container(
      padding: const EdgeInsets.all(16),
      color: state.isLocalPlayerTurn ? Colors.blue[50] : Colors.grey[100],
      child: Row(
        children: [
          Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
              color: state.localPlayerColor == PieceType.black 
                  ? Colors.black 
                  : Colors.white,
              shape: BoxShape.circle,
              border: Border.all(
                color: state.isLocalPlayerTurn ? Colors.blue : Colors.grey[300]!,
                width: state.isLocalPlayerTurn ? 3 : 2,
              ),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '你 (${state.localPlayerColor.getDisplayName()})',
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  state.isLocalPlayerTurn ? '你的回合' : '等待中',
                  style: TextStyle(
                    fontSize: 12,
                    color: state.isLocalPlayerTurn ? Colors.blue : Colors.grey[600],
                    fontWeight: state.isLocalPlayerTurn ? FontWeight.w500 : FontWeight.normal,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// 从Match构建本地玩家信息栏
  Widget _buildLocalPlayerInfoFromMatch(
    BuildContext context,
    dynamic match,
    String localPlayerId,
  ) {
    final localColor = match.getPlayerColor(localPlayerId) ?? PieceType.black;
    return Container(
      padding: const EdgeInsets.all(16),
      color: Colors.grey[100],
      child: Row(
        children: [
          Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
              color: localColor == PieceType.black ? Colors.black : Colors.white,
              shape: BoxShape.circle,
              border: Border.all(color: Colors.grey[300]!, width: 2),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '你 (${localColor.getDisplayName()})',
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Text(
                  '等待中',
                  style: TextStyle(fontSize: 12, color: Colors.grey),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// 显示游戏结束对话框
  void _showGameOverDialog(BuildContext context, OnlineGameOver state) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (dialogContext) => AlertDialog(
        title: Text(state.isLocalPlayerWin ? '你赢了！' : '你输了'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              state.isLocalPlayerWin ? Icons.emoji_events : Icons.sentiment_dissatisfied,
              size: 80,
              color: state.isLocalPlayerWin ? Colors.amber : Colors.grey,
            ),
            const SizedBox(height: 16),
            Text(state.reason),
            const SizedBox(height: 8),
            Text(
              '总步数: ${state.moveHistory.length}',
              style: TextStyle(fontSize: 14, color: Colors.grey[600]),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(dialogContext).pop();
              context.read<OnlineGameBloc>().add(const ExitOnlineGameEvent());
              Navigator.of(context).pop();
            },
            child: const Text('返回主菜单'),
          ),
        ],
      ),
    );
  }

  /// 显示退出确认对话框
  void _showExitConfirmDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        title: const Text('退出确认'),
        content: const Text('确定要退出当前对局吗？\n退出后将判定为失败。'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(dialogContext).pop(),
            child: const Text('取消'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(dialogContext).pop();
              context.read<OnlineGameBloc>().add(const ExitOnlineGameEvent());
              Navigator.of(context).pop();
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('确定退出'),
          ),
        ],
      ),
    );
  }
}
