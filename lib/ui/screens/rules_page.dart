// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 实现游戏规则页面，包含游戏目标、基本规则、移动规则、吃子规则示例

/// Rules Page - 游戏规则页面
/// 
/// 职责：
/// - 显示完整的游戏规则说明
/// - 包含图示和示例
/// - 帮助玩家理解游戏玩法
library;

import 'package:flutter/material.dart';

/// 规则页面
class RulesPage extends StatelessWidget {
  const RulesPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: AppBar(
        title: const Text('游戏规则'),
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildObjectiveSection(),
            const SizedBox(height: 20),
            _buildBasicRulesSection(),
            const SizedBox(height: 20),
            _buildMovementSection(),
            const SizedBox(height: 20),
            _buildCaptureSection(),
            const SizedBox(height: 20),
            _buildWinConditionSection(),
            const SizedBox(height: 32),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => Navigator.pop(context),
        icon: const Icon(Icons.play_arrow),
        label: const Text('开始游戏'),
      ),
    );
  }

  Widget _buildObjectiveSection() {
    return _RuleSection(
      title: '游戏目标',
      icon: Icons.flag,
      color: Colors.blue,
      children: [
        const Text(
          '通过移动棋子形成特定的三子连线，吃掉对方的棋子，最终吃掉对方所有棋子或使对方无子可走。',
          style: TextStyle(fontSize: 16, height: 1.5),
        ),
      ],
    );
  }

  Widget _buildBasicRulesSection() {
    return _RuleSection(
      title: '基本规则',
      icon: Icons.rule,
      color: Colors.green,
      children: [
        _buildRuleItem('1', '棋盘为4×4网格，共16个位置'),
        _buildRuleItem('2', '黑方先手，双方轮流移动一个棋子'),
        _buildRuleItem('3', '每次只能移动一个棋子到相邻的空位'),
        _buildRuleItem('4', '移动方向：上、下、左、右（不可斜向移动）'),
      ],
    );
  }

  Widget _buildMovementSection() {
    return _RuleSection(
      title: '移动规则',
      icon: Icons.arrow_forward,
      color: Colors.purple,
      children: [
        const Text(
          '合法移动：',
          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
        ),
        const SizedBox(height: 12),
        _buildMovementExample(
          '✓ 移动到上下左右相邻的空位',
          Colors.green,
          true,
        ),
        const SizedBox(height: 8),
        const Text(
          '非法移动：',
          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
        ),
        const SizedBox(height: 12),
        _buildMovementExample(
          '✗ 移动到非相邻位置',
          Colors.red,
          false,
        ),
        const SizedBox(height: 8),
        _buildMovementExample(
          '✗ 移动到已有棋子的位置',
          Colors.red,
          false,
        ),
        const SizedBox(height: 8),
        _buildMovementExample(
          '✗ 斜向移动',
          Colors.red,
          false,
        ),
      ],
    );
  }

  Widget _buildCaptureSection() {
    return _RuleSection(
      title: '吃子规则',
      icon: Icons.close,
      color: Colors.orange,
      emphasis: true,
      children: [
        const Text(
          '核心规则：',
          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
        ),
        const SizedBox(height: 12),
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.orange.shade50,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.orange.shade200),
          ),
          child: const Text(
            '当移动后形成"己-己-敌"三子连线时（横向或纵向），可以吃掉最远端的敌方棋子。',
            style: TextStyle(
              fontSize: 16,
              height: 1.6,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
        const SizedBox(height: 20),
        const Text(
          '重要提示：',
          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
        ),
        const SizedBox(height: 12),
        _buildImportantNote('移动的棋子必须参与形成三子连线'),
        const SizedBox(height: 8),
        _buildImportantNote('只能吃掉最远端的敌方棋子'),
        const SizedBox(height: 8),
        _buildImportantNote('斜向的三子连线不能吃子'),
        const SizedBox(height: 20),
        const Text(
          '吃子示例：',
          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
        ),
        const SizedBox(height: 12),
        _buildCaptureExample(
          '横向吃子',
          '移动前： 空 - ○ - ●\n移动后： ○ - ○ - ● → ○ - ○ - 空',
          '黑子移动到左侧形成连线，吃掉右侧白子',
        ),
        const SizedBox(height: 12),
        _buildCaptureExample(
          '纵向吃子',
          '移动前： 空 | ○ | ●\n移动后： ○ | ○ | ● → ○ | ○ | 空',
          '黑子移动到上方形成连线，吃掉下方白子',
        ),
      ],
    );
  }

  Widget _buildWinConditionSection() {
    return _RuleSection(
      title: '胜负判定',
      icon: Icons.emoji_events,
      color: Colors.amber,
      children: [
        _buildConditionItem(
          '获胜条件',
          [
            '• 吃掉对方所有棋子',
            '• 对方无子可走',
          ],
          Colors.green,
        ),
        const SizedBox(height: 16),
        _buildConditionItem(
          '平局条件',
          [
            '• 双方都无法吃子且重复移动50步',
          ],
          Colors.blue,
        ),
      ],
    );
  }

  Widget _buildRuleItem(String number, String text) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: 28,
            height: 28,
            decoration: BoxDecoration(
              color: Colors.blue.shade100,
              shape: BoxShape.circle,
            ),
            child: Center(
              child: Text(
                number,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.blue.shade700,
                ),
              ),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.only(top: 4),
              child: Text(
                text,
                style: const TextStyle(fontSize: 15, height: 1.4),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMovementExample(String text, Color color, bool isValid) {
    return Row(
      children: [
        Icon(
          isValid ? Icons.check_circle : Icons.cancel,
          color: color,
          size: 20,
        ),
        const SizedBox(width: 8),
        Expanded(
          child: Text(
            text,
            style: TextStyle(
              fontSize: 15,
              color: Color.fromRGBO(color.red, color.green, color.blue, 0.7),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildImportantNote(String text) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Icon(Icons.info_outline, size: 20, color: Colors.orange.shade700),
        const SizedBox(width: 8),
        Expanded(
          child: Text(
            text,
            style: const TextStyle(fontSize: 15, height: 1.4),
          ),
        ),
      ],
    );
  }

  Widget _buildCaptureExample(String title, String pattern, String description) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey.shade100,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 15,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            pattern,
            style: TextStyle(
              fontFamily: 'monospace',
              fontSize: 14,
              color: Colors.grey.shade700,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            description,
            style: TextStyle(
              fontSize: 13,
              color: Colors.grey.shade600,
              fontStyle: FontStyle.italic,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConditionItem(String title, List<String> items, Color color) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(Icons.star, color: color, size: 20),
            const SizedBox(width: 8),
            Text(
              title,
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 16,
                color: Color.fromRGBO(color.red, color.green, color.blue, 0.7),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        ...items.map((item) => Padding(
          padding: const EdgeInsets.only(left: 28, bottom: 4),
          child: Text(
            item,
            style: const TextStyle(fontSize: 15, height: 1.4),
          ),
        )),
      ],
    );
  }
}

/// 规则章节组件
class _RuleSection extends StatelessWidget {
  final String title;
  final IconData icon;
  final Color color;
  final List<Widget> children;
  final bool emphasis;

  const _RuleSection({
    required this.title,
    required this.icon,
    required this.color,
    required this.children,
    this.emphasis = false,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        border: emphasis ? Border.all(color: color, width: 2) : null,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: color.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(icon, color: color, size: 24),
                ),
                const SizedBox(width: 12),
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Color.fromRGBO(
                      color.red,
                      color.green,
                      color.blue,
                      0.7,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            ...children,
          ],
        ),
      ),
    );
  }
}
