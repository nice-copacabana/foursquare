// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 实现游戏设置页面，包含音效、震动、AI难度、主题等配置选项

/// Settings Page - 游戏设置页面
/// 
/// 职责：
/// - 提供游戏设置入口
/// - 支持音效、震动、主题等配置
/// - 自动保存设置
library;

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../services/storage_service.dart';
import '../../services/audio_service.dart';
import '../../services/music_service.dart'; // 导入音乐服务
import '../../theme/theme_manager.dart'; // 导入主题管理器

/// 设置页面
class SettingsPage extends StatefulWidget {
  const SettingsPage({super.key});

  @override
  State<SettingsPage> createState() => _SettingsPageState();
}

class _SettingsPageState extends State<SettingsPage> {
  final StorageService _storageService = StorageService();
  final AudioService _audioService = AudioService();
  final MusicService _musicService = MusicService(); // 添加音乐服务
  
  GameSettings _settings = const GameSettings();
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadSettings();
  }

  Future<void> _loadSettings() async {
    setState(() => _isLoading = true);
    final settings = await _storageService.loadSettings();
    setState(() {
      _settings = settings;
      _isLoading = false;
    });
  }

  Future<void> _saveSettings() async {
    await _storageService.saveSettings(_settings);
  }

  void _updateSetting(GameSettings newSettings) {
    setState(() {
      _settings = newSettings;
    });
    _saveSettings();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: AppBar(
        title: const Text('设置'),
        elevation: 0,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  _buildSoundSettingsGroup(),
                  const SizedBox(height: 16),
                  _buildVibrationSettingsGroup(),
                  const SizedBox(height: 16),
                  _buildAIDifficultyGroup(),
                  const SizedBox(height: 16),
                  _buildThemeGroup(),
                  const SizedBox(height: 16),
                  _buildAboutGroup(),
                  const SizedBox(height: 16),
                  _buildDangerZoneGroup(),
                  const SizedBox(height: 32),
                ],
              ),
            ),
    );
  }

  Widget _buildSoundSettingsGroup() {
    return _SettingsGroup(
      title: '音效设置',
      children: [
        _SettingsSwitch(
          label: '音效开关',
          subtitle: '移动、吃子等游戏音效',
          value: _settings.soundEnabled,
          onChanged: (value) {
            _audioService.setEnabled(value);
            if (value) {
              _audioService.playSound(SoundType.move);
            }
            _updateSetting(_settings.copyWith(soundEnabled: value));
          },
        ),
        if (_settings.soundEnabled) ...[
          const Divider(),
          _SettingsSlider(
            label: '音效音量',
            value: _settings.soundVolume,
            onChanged: (value) {
              _audioService.setVolume(value);
              _updateSetting(_settings.copyWith(soundVolume: value));
            },
            onChangeEnd: (_) {
              _audioService.playSound(SoundType.move);
            },
          ),
        ],
        const Divider(),
        _SettingsSwitch(
          label: '背景音乐',
          subtitle: '游戏背景音乐',
          value: _settings.musicEnabled,
          onChanged: (value) async {
            if (value) {
              await _musicService.setEnabled(true);
              await _musicService.playMusic(MusicTheme.main);
            } else {
              await _musicService.setEnabled(false);
            }
            _updateSetting(_settings.copyWith(musicEnabled: value));
          },
        ),
        if (_settings.musicEnabled) ...[
          const Divider(),
          _SettingsSlider(
            label: '音乐音量',
            value: _settings.musicVolume,
            onChanged: (value) async {
              await _musicService.setVolume(value);
              _updateSetting(_settings.copyWith(musicVolume: value));
            },
          ),
          const Divider(),
          _SettingsSelector(
            label: '音乐主题',
            subtitle: '选择喜欢的背景音乐',
            options: const ['main', 'gameplay', 'classic', 'night', 'relaxing'],
            optionLabels: const {
              'main': '主菜单',
              'gameplay': '游戏中',
              'classic': '经典',
              'night': '夜间',
              'relaxing': '轻松',
            },
            value: _settings.musicTheme ?? 'main',
            onChanged: (value) async {
              MusicTheme theme;
              switch (value) {
                case 'main':
                  theme = MusicTheme.main;
                  break;
                case 'gameplay':
                  theme = MusicTheme.gameplay;
                  break;
                case 'classic':
                  theme = MusicTheme.classic;
                  break;
                case 'night':
                  theme = MusicTheme.night;
                  break;
                case 'relaxing':
                  theme = MusicTheme.relaxing;
                  break;
                default:
                  theme = MusicTheme.main;
              }
              await _musicService.switchTheme(theme);
              _updateSetting(_settings.copyWith(musicTheme: value));
            },
          ),
        ],
      ],
    );
  }

  Widget _buildVibrationSettingsGroup() {
    return _SettingsGroup(
      title: '震动设置',
      children: [
        _SettingsSwitch(
          label: '震动反馈',
          subtitle: '触摸和游戏操作时的震动反馈',
          value: _settings.vibrationEnabled,
          onChanged: (value) {
            if (value) {
              HapticFeedback.mediumImpact();
            }
            _updateSetting(_settings.copyWith(vibrationEnabled: value));
          },
        ),
      ],
    );
  }

  Widget _buildAIDifficultyGroup() {
    return _SettingsGroup(
      title: 'AI设置',
      children: [
        _SettingsSelector(
          label: '默认AI难度',
          subtitle: '新游戏的默认AI难度',
          options: const ['easy', 'medium', 'hard'],
          optionLabels: const {
            'easy': '简单',
            'medium': '中等',
            'hard': '困难',
          },
          value: _settings.difficulty,
          onChanged: (value) {
            _updateSetting(_settings.copyWith(difficulty: value));
          },
        ),
      ],
    );
  }

  Widget _buildThemeGroup() {
    return _SettingsGroup(
      title: '主题设置',
      children: [
        _SettingsSelector(
          label: '棋盘主题',
          subtitle: '选择喜欢的棋盘风格',
          options: ThemeManager.getThemeNames(),
          optionLabels: ThemeManager.getThemeDisplayNames(),
          value: _settings.selectedTheme == 'default' ? 'default' : _settings.selectedTheme,
          onChanged: (value) {
            _updateSetting(_settings.copyWith(selectedTheme: value));
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('主题将在重启应用后生效'),
                duration: Duration(seconds: 2),
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildAboutGroup() {
    return _SettingsGroup(
      title: '关于',
      children: [
        _SettingsItem(
          label: '版本号',
          value: '0.1.0',
          icon: Icons.info_outline,
        ),
        const Divider(),
        _SettingsItem(
          label: '开发者',
          value: 'Qoder AI',
          icon: Icons.code,
        ),
        const Divider(),
        ListTile(
          leading: const Icon(Icons.article),
          title: const Text('开源许可'),
          trailing: const Icon(Icons.arrow_forward_ios, size: 16),
          onTap: () {
            showLicensePage(
              context: context,
              applicationName: '四子游戏',
              applicationVersion: '0.1.0',
            );
          },
        ),
      ],
    );
  }

  Widget _buildDangerZoneGroup() {
    return _SettingsGroup(
      title: '危险操作',
      titleColor: Colors.red,
      children: [
        ListTile(
          leading: const Icon(Icons.delete_outline, color: Colors.red),
          title: const Text(
            '清空统计数据',
            style: TextStyle(color: Colors.red),
          ),
          trailing: const Icon(Icons.arrow_forward_ios, size: 16),
          onTap: _confirmResetStatistics,
        ),
        const Divider(),
        ListTile(
          leading: const Icon(Icons.restart_alt, color: Colors.red),
          title: const Text(
            '重置所有设置',
            style: TextStyle(color: Colors.red),
          ),
          trailing: const Icon(Icons.arrow_forward_ios, size: 16),
          onTap: _confirmResetAll,
        ),
      ],
    );
  }

  Future<void> _confirmResetStatistics() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('清空统计数据'),
        content: const Text('确定要清空所有游戏统计数据吗？此操作无法撤销。'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('取消'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('清空'),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      await _storageService.resetStatistics();
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('统计数据已清空')),
        );
      }
    }
  }

  Future<void> _confirmResetAll() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('重置所有设置'),
        content: const Text('确定要重置所有设置和数据吗？此操作无法撤销。'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('取消'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('重置'),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      await _storageService.resetAll();
      _loadSettings();
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('已重置所有设置')),
        );
      }
    }
  }
}

/// 设置组组件
class _SettingsGroup extends StatelessWidget {
  final String title;
  final List<Widget> children;
  final Color? titleColor;

  const _SettingsGroup({
    required this.title,
    required this.children,
    this.titleColor,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 16, bottom: 8),
          child: Text(
            title,
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.bold,
              color: titleColor ?? Colors.grey.shade700,
            ),
          ),
        ),
        Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 10,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Column(
            children: children,
          ),
        ),
      ],
    );
  }
}

/// 开关设置项组件
class _SettingsSwitch extends StatelessWidget {
  final String label;
  final String? subtitle;
  final bool value;
  final ValueChanged<bool> onChanged;

  const _SettingsSwitch({
    required this.label,
    this.subtitle,
    required this.value,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return SwitchListTile(
      title: Text(label),
      subtitle: subtitle != null ? Text(subtitle!) : null,
      value: value,
      onChanged: onChanged,
    );
  }
}

/// 滑块设置项组件
class _SettingsSlider extends StatelessWidget {
  final String label;
  final double value;
  final ValueChanged<double> onChanged;
  final ValueChanged<double>? onChangeEnd;

  const _SettingsSlider({
    required this.label,
    required this.value,
    required this.onChanged,
    this.onChangeEnd,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Text(label),
      subtitle: Column(
        children: [
          Slider(
            value: value,
            onChanged: onChanged,
            onChangeEnd: onChangeEnd,
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text('0%', style: TextStyle(fontSize: 12)),
              Text(
                '${(value * 100).toInt()}%',
                style: const TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const Text('100%', style: TextStyle(fontSize: 12)),
            ],
          ),
        ],
      ),
    );
  }
}

/// 选择器设置项组件
class _SettingsSelector extends StatelessWidget {
  final String label;
  final String? subtitle;
  final List<String> options;
  final Map<String, String> optionLabels;
  final String value;
  final ValueChanged<String> onChanged;

  const _SettingsSelector({
    required this.label,
    this.subtitle,
    required this.options,
    required this.optionLabels,
    required this.value,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Text(label),
      subtitle: subtitle != null ? Text(subtitle!) : null,
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            optionLabels[value] ?? value,
            style: TextStyle(
              color: Colors.grey.shade600,
              fontSize: 14,
            ),
          ),
          const SizedBox(width: 8),
          const Icon(Icons.arrow_forward_ios, size: 16),
        ],
      ),
      onTap: () {
        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: Text(label),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: options.map((option) {
                return RadioListTile<String>(
                  title: Text(optionLabels[option] ?? option),
                  value: option,
                  groupValue: value,
                  onChanged: (newValue) {
                    if (newValue != null) {
                      onChanged(newValue);
                      Navigator.pop(context);
                    }
                  },
                );
              }).toList(),
            ),
          ),
        );
      },
    );
  }
}

/// 普通设置项组件
class _SettingsItem extends StatelessWidget {
  final String label;
  final String value;
  final IconData? icon;

  const _SettingsItem({
    required this.label,
    required this.value,
    this.icon,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      leading: icon != null ? Icon(icon) : null,
      title: Text(label),
      trailing: Text(
        value,
        style: TextStyle(
          color: Colors.grey.shade600,
          fontSize: 14,
        ),
      ),
    );
  }
}
