// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 实现带动画效果的棋盘Widget，支持棋子移动动画和吃子动画

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../models/board_state.dart';
import '../../models/position.dart';
import '../../models/piece_type.dart';
import 'board_painter.dart';

/// 带动画效果的棋盘Widget
/// 
/// 支持：
/// - 棋子移动动画（300ms平滑过渡）
/// - 吃子动画（缩放消失效果）
/// - 震动反馈
class AnimatedBoardWidget extends StatefulWidget {
  final BoardState boardState;
  final Position? selectedPiece;
  final List<Position> validMoves;
  final Position? lastMoveFrom;
  final Position? lastMoveTo;
  final Position? capturedPiecePosition;
  final Function(Position) onPositionTapped;
  final double? size;
  final bool vibrationEnabled;

  const AnimatedBoardWidget({
    super.key,
    required this.boardState,
    required this.onPositionTapped,
    this.selectedPiece,
    this.validMoves = const [],
    this.lastMoveFrom,
    this.lastMoveTo,
    this.capturedPiecePosition,
    this.size,
    this.vibrationEnabled = true,
  });

  @override
  State<AnimatedBoardWidget> createState() => _AnimatedBoardWidgetState();
}

class _AnimatedBoardWidgetState extends State<AnimatedBoardWidget>
    with TickerProviderStateMixin {
  // 移动动画控制器
  AnimationController? _moveAnimationController;
  Animation<Offset>? _moveAnimation;
  Position? _animatingTo;
  PieceType? _animatingPiece;

  // 吃子动画控制器
  AnimationController? _captureAnimationController;
  Animation<double>? _captureScaleAnimation;
  Animation<double>? _captureOpacityAnimation;
  Position? _capturingPosition;
  PieceType? _capturingPiece;

  @override
  void initState() {
    super.initState();
    _initAnimations();
  }

  @override
  void dispose() {
    _moveAnimationController?.dispose();
    _captureAnimationController?.dispose();
    super.dispose();
  }

  void _initAnimations() {
    // 移动动画：300ms
    _moveAnimationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    // 吃子动画：400ms
    _captureAnimationController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _captureScaleAnimation = TweenSequence<double>([
      TweenSequenceItem(
        tween: Tween<double>(begin: 1.0, end: 1.2)
            .chain(CurveTween(curve: Curves.easeOut)),
        weight: 25,
      ),
      TweenSequenceItem(
        tween: Tween<double>(begin: 1.2, end: 0.0)
            .chain(CurveTween(curve: Curves.easeIn)),
        weight: 75,
      ),
    ]).animate(_captureAnimationController!);

    _captureOpacityAnimation = Tween<double>(
      begin: 1.0,
      end: 0.0,
    ).animate(CurvedAnimation(
      parent: _captureAnimationController!,
      curve: const Interval(0.25, 1.0, curve: Curves.easeOut),
    ),);
  }

  @override
  void didUpdateWidget(AnimatedBoardWidget oldWidget) {
    super.didUpdateWidget(oldWidget);

    // 检测移动
    if (widget.lastMoveFrom != null &&
        widget.lastMoveTo != null &&
        (widget.lastMoveFrom != oldWidget.lastMoveFrom ||
            widget.lastMoveTo != oldWidget.lastMoveTo)) {
      _playMoveAnimation(
        widget.lastMoveFrom!,
        widget.lastMoveTo!,
        widget.boardState.getPiece(widget.lastMoveTo!),
      );
    }

    // 检测吃子
    if (widget.capturedPiecePosition != null &&
        widget.capturedPiecePosition != oldWidget.capturedPiecePosition) {
      _playCaptureAnimation(
        widget.capturedPiecePosition!,
        oldWidget.boardState.getPiece(widget.capturedPiecePosition!),
      );
    }
  }

  /// 播放移动动画
  void _playMoveAnimation(Position from, Position to, PieceType? piece) {
    if (piece == null) return;

    setState(() {
      _animatingTo = to;
      _animatingPiece = piece;
    });

    _moveAnimation = Tween<Offset>(
      begin: Offset(from.x.toDouble(), from.y.toDouble()),
      end: Offset(to.x.toDouble(), to.y.toDouble()),
    ).animate(CurvedAnimation(
      parent: _moveAnimationController!,
      curve: Curves.easeInOut,
    ),);

    _moveAnimationController!.forward(from: 0.0).then((_) {
      setState(() {
        _animatingTo = null;
        _animatingPiece = null;
      });
    });
  }

  /// 播放吃子动画
  void _playCaptureAnimation(Position position, PieceType? piece) {
    if (piece == null) return;

    setState(() {
      _capturingPosition = position;
      _capturingPiece = piece;
    });

    // 震动反馈
    if (widget.vibrationEnabled) {
      HapticFeedback.mediumImpact();
    }

    _captureAnimationController!.forward(from: 0.0).then((_) {
      setState(() {
        _capturingPosition = null;
        _capturingPiece = null;
      });
      _captureAnimationController!.reset();
    });
  }

  @override
  Widget build(BuildContext context) {
    final boardSize = widget.size ?? _calculateBoardSize(context);
    final cellSize = boardSize / 4;

    return Center(
      child: RepaintBoundary( // 添加 RepaintBoundary 优化渲染
        child: SizedBox(
          width: boardSize,
          height: boardSize,
          child: Stack(
            children: [
              // 基础棋盘和静态棋子
              RepaintBoundary(
                child: _buildBasicBoard(boardSize),
              ),

              // 移动中的棋子
              if (_animatingPiece != null && _moveAnimation != null)
                RepaintBoundary(
                  child: _buildAnimatingPiece(cellSize),
                ),

              // 被吃的棋子
              if (_capturingPiece != null && _capturingPosition != null)
                RepaintBoundary(
                  child: _buildCapturingPiece(cellSize),
                ),

              // 触摸层
              _buildTouchLayer(boardSize),
            ],
          ),
        ),
      ),
    );
  }

  /// 构建基础棋盘
  Widget _buildBasicBoard(double boardSize) {
    return Container(
      decoration: BoxDecoration(
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 10,
            offset: const Offset(0, 5),
          ),
        ],
      ),
      child: CustomPaint(
        painter: BoardPainter(
          boardState: widget.boardState,
          selectedPiece: widget.selectedPiece,
          validMoves: widget.validMoves,
          lastMoveFrom: widget.lastMoveFrom,
          lastMoveTo: widget.lastMoveTo,
          hidePiece: _animatingTo, // 隐藏目标位置的棋子，显示动画棋子
        ),
        size: Size(boardSize, boardSize),
      ),
    );
  }

  /// 构建移动中的棋子
  Widget _buildAnimatingPiece(double cellSize) {
    return AnimatedBuilder(
      animation: _moveAnimation!,
      builder: (context, child) {
        final offset = _moveAnimation!.value;
        return Positioned(
          left: offset.dx * cellSize,
          top: offset.dy * cellSize,
          child: SizedBox(
            width: cellSize,
            height: cellSize,
            child: CustomPaint(
              painter: _PiecePainter(
                piece: _animatingPiece!,
                cellSize: cellSize,
              ),
            ),
          ),
        );
      },
    );
  }

  /// 构建被吃的棋子（带消失动画）
  Widget _buildCapturingPiece(double cellSize) {
    return AnimatedBuilder(
      animation: _captureAnimationController!,
      builder: (context, child) {
        return Positioned(
          left: _capturingPosition!.x * cellSize,
          top: _capturingPosition!.y * cellSize,
          child: Opacity(
            opacity: _captureOpacityAnimation!.value,
            child: Transform.scale(
              scale: _captureScaleAnimation!.value,
              child: SizedBox(
                width: cellSize,
                height: cellSize,
                child: CustomPaint(
                  painter: _PiecePainter(
                    piece: _capturingPiece!,
                    cellSize: cellSize,
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  /// 构建触摸层
  Widget _buildTouchLayer(double boardSize) {
    return GestureDetector(
      onTapUp: (details) => _handleTap(details, boardSize),
      child: Container(color: Colors.transparent),
    );
  }

  /// 计算棋盘尺寸
  double _calculateBoardSize(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;
    final maxSize = screenSize.width < screenSize.height
        ? screenSize.width
        : screenSize.height;
    return (maxSize * 0.8).clamp(200.0, 600.0);
  }

  /// 处理点击事件
  void _handleTap(TapUpDetails details, double boardSize) {
    final cellSize = boardSize / 4;
    final localPos = details.localPosition;

    final x = (localPos.dx / cellSize).floor();
    final y = (localPos.dy / cellSize).floor();

    if (x >= 0 && x < 4 && y >= 0 && y < 4) {
      final position = Position(x, y);
      widget.onPositionTapped(position);
    }
  }
}

/// 单个棋子绘制器
class _PiecePainter extends CustomPainter {
  final PieceType piece;
  final double cellSize;

  _PiecePainter({
    required this.piece,
    required this.cellSize,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(cellSize / 2, cellSize / 2);
    final radius = cellSize * 0.35;

    final paint = Paint()
      ..style = PaintingStyle.fill
      ..color = piece == PieceType.black ? Colors.black87 : Colors.white;

    // 绘制阴影
    final shadowPaint = Paint()
      ..color = Colors.black.withOpacity(0.3)
      ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 3);

    canvas.drawCircle(
      center + const Offset(2, 2),
      radius,
      shadowPaint,
    );

    // 绘制棋子
    canvas.drawCircle(center, radius, paint);

    // 绘制高光
    final highlightPaint = Paint()
      ..style = PaintingStyle.fill
      ..color = Colors.white.withOpacity(piece == PieceType.black ? 0.2 : 0.4);

    canvas.drawCircle(
      center - Offset(radius * 0.3, radius * 0.3),
      radius * 0.4,
      highlightPaint,
    );

    // 绘制边框
    final borderPaint = Paint()
      ..style = PaintingStyle.stroke
      ..color = piece == PieceType.black
          ? Colors.grey.shade800
          : Colors.grey.shade300
      ..strokeWidth = 2;

    canvas.drawCircle(center, radius, borderPaint);
  }

  @override
  bool shouldRepaint(_PiecePainter oldDelegate) {
    return oldDelegate.piece != piece || oldDelegate.cellSize != cellSize;
  }
}
