// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 实现棋盘Widget，集成BoardPainter并处理用户交互

import 'package:flutter/material.dart';
import '../../models/board_state.dart';
import '../../models/position.dart';
import 'board_painter.dart';

/// 棋盘Widget
/// 
/// 集成BoardPainter进行绘制，并处理用户点击交互
class BoardWidget extends StatelessWidget {
  final BoardState boardState;
  final Position? selectedPiece;
  final List<Position> validMoves;
  final Position? lastMoveFrom;
  final Position? lastMoveTo;
  final Function(Position) onPositionTapped;
  final double? size;

  const BoardWidget({
    super.key,
    required this.boardState,
    required this.onPositionTapped,
    this.selectedPiece,
    this.validMoves = const [],
    this.lastMoveFrom,
    this.lastMoveTo,
    this.size,
  });

  @override
  Widget build(BuildContext context) {
    // 计算棋盘尺寸
    final boardSize = size ?? _calculateBoardSize(context);

    return Center(
      child: RepaintBoundary( // 添加 RepaintBoundary 优化渲染
        child: Container(
          width: boardSize,
          height: boardSize,
          decoration: BoxDecoration(
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                blurRadius: 10,
                offset: const Offset(0, 5),
              ),
            ],
          ),
          child: GestureDetector(
            onTapUp: (details) => _handleTap(details, boardSize),
            child: CustomPaint(
              painter: BoardPainter(
                boardState: boardState,
                selectedPiece: selectedPiece,
                validMoves: validMoves,
                lastMoveFrom: lastMoveFrom,
                lastMoveTo: lastMoveTo,
              ),
              size: Size(boardSize, boardSize),
            ),
          ),
        ),
      ),
    );
  }

  /// 计算棋盘尺寸
  double _calculateBoardSize(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;
    final maxSize = screenSize.width < screenSize.height
        ? screenSize.width
        : screenSize.height;

    // 留出边距，取屏幕最小边的80%
    return (maxSize * 0.8).clamp(200.0, 600.0);
  }

  /// 处理点击事件
  void _handleTap(TapUpDetails details, double boardSize) {
    final cellSize = boardSize / 4;
    final localPos = details.localPosition;

    // 将屏幕坐标转换为棋盘坐标
    final x = (localPos.dx / cellSize).floor();
    final y = (localPos.dy / cellSize).floor();

    // 检查坐标是否在棋盘范围内
    if (x >= 0 && x < 4 && y >= 0 && y < 4) {
      final position = Position(x, y);
      onPositionTapped(position);
    }
  }
}
