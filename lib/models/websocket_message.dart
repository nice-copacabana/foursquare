// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 创建WebSocket消息数据模型

import 'package:equatable/equatable.dart';
import 'message_type.dart';

/// WebSocket消息模型
/// 
/// 用于在线对战中客户端与服务器之间的通信
class WebSocketMessage extends Equatable {
  /// 消息类型
  final MessageType type;
  
  /// 匹配ID（可选）
  final String? matchId;
  
  /// 消息内容
  final Map<String, dynamic> payload;
  
  /// 时间戳
  final DateTime timestamp;

  const WebSocketMessage({
    required this.type,
    this.matchId,
    required this.payload,
    required this.timestamp,
  });

  /// 从JSON创建消息
  factory WebSocketMessage.fromJson(Map<String, dynamic> json) {
    return WebSocketMessage(
      type: MessageTypeExtension.fromJson(json['type'] as String),
      matchId: json['matchId'] as String?,
      payload: json['payload'] as Map<String, dynamic>? ?? {},
      timestamp: DateTime.parse(json['timestamp'] as String),
    );
  }

  /// 转换为JSON
  Map<String, dynamic> toJson() {
    return {
      'type': type.toJson(),
      'matchId': matchId,
      'payload': payload,
      'timestamp': timestamp.toIso8601String(),
    };
  }

  /// 创建匹配请求消息
  factory WebSocketMessage.matchRequest(String playerId) {
    return WebSocketMessage(
      type: MessageType.matchRequest,
      payload: {'playerId': playerId},
      timestamp: DateTime.now(),
    );
  }

  /// 创建移动消息
  factory WebSocketMessage.move({
    required String matchId,
    required Map<String, dynamic> moveData,
  }) {
    return WebSocketMessage(
      type: MessageType.move,
      matchId: matchId,
      payload: moveData,
      timestamp: DateTime.now(),
    );
  }

  /// 创建心跳消息
  factory WebSocketMessage.heartbeat() {
    return WebSocketMessage(
      type: MessageType.heartbeat,
      payload: const {},
      timestamp: DateTime.now(),
    );
  }

  /// 创建断开连接消息
  factory WebSocketMessage.disconnect(String matchId) {
    return WebSocketMessage(
      type: MessageType.disconnect,
      matchId: matchId,
      payload: const {},
      timestamp: DateTime.now(),
    );
  }

  /// 创建重连消息
  factory WebSocketMessage.reconnect({
    required String matchId,
    required String playerId,
  }) {
    return WebSocketMessage(
      type: MessageType.reconnect,
      matchId: matchId,
      payload: {'playerId': playerId},
      timestamp: DateTime.now(),
    );
  }

  /// 创建取消匹配消息
  factory WebSocketMessage.cancelMatch(String playerId) {
    return WebSocketMessage(
      type: MessageType.matchCanceled,
      payload: {'playerId': playerId},
      timestamp: DateTime.now(),
    );
  }

  /// 复制并修改部分字段
  WebSocketMessage copyWith({
    MessageType? type,
    String? matchId,
    Map<String, dynamic>? payload,
    DateTime? timestamp,
  }) {
    return WebSocketMessage(
      type: type ?? this.type,
      matchId: matchId ?? this.matchId,
      payload: payload ?? this.payload,
      timestamp: timestamp ?? this.timestamp,
    );
  }

  @override
  List<Object?> get props => [type, matchId, payload, timestamp];

  @override
  String toString() {
    return 'WebSocketMessage(type: ${type.displayName}, matchId: $matchId, timestamp: $timestamp)';
  }
}
