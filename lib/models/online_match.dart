// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 创建在线对战匹配数据模型

import 'package:equatable/equatable.dart';
import 'board_state.dart';
import 'move.dart';
import 'piece_type.dart';
import 'match_status.dart';
import 'game_save.dart'; // For BoardStateData and MoveData

/// 在线匹配模型
/// 
/// 表示一场在线对战的完整信息
class OnlineMatch extends Equatable {
  /// 匹配ID
  final String matchId;
  
  /// 玩家1 ID
  final String player1Id;
  
  /// 玩家2 ID
  final String player2Id;
  
  /// 玩家1颜色
  final PieceType player1Color;
  
  /// 玩家2颜色
  final PieceType player2Color;
  
  /// 当前回合玩家ID
  final String currentTurn;
  
  /// 当前棋盘状态
  final BoardState boardState;
  
  /// 移动历史
  final List<Move> moveHistory;
  
  /// 匹配状态
  final MatchStatus status;
  
  /// 创建时间
  final DateTime createdAt;
  
  /// 最后更新时间
  final DateTime lastUpdateAt;

  const OnlineMatch({
    required this.matchId,
    required this.player1Id,
    required this.player2Id,
    required this.player1Color,
    required this.player2Color,
    required this.currentTurn,
    required this.boardState,
    required this.moveHistory,
    required this.status,
    required this.createdAt,
    required this.lastUpdateAt,
  });

  /// 从JSON创建匹配
  factory OnlineMatch.fromJson(Map<String, dynamic> json) {
    final player1Color = json['player1Color'] == 'black' 
        ? PieceType.black 
        : PieceType.white;
    final player2Color = json['player2Color'] == 'black' 
        ? PieceType.black 
        : PieceType.white;
    
    // 解析棋盘状态
    final boardData = json['boardState'] as Map<String, dynamic>;
    final currentPlayer = json['currentTurn'] == json['player1Id']
        ? player1Color
        : player2Color;
    final boardStateData = BoardStateData.fromJson(boardData);
    final boardState = boardStateData.toBoardState(currentPlayer);
    
    // 解析移动历史
    final moveList = json['moveHistory'] as List<dynamic>? ?? [];
    final moveHistory = moveList
        .map((m) => MoveData.fromJson(m as Map<String, dynamic>).toMove())
        .toList();

    return OnlineMatch(
      matchId: json['matchId'] as String,
      player1Id: json['player1Id'] as String,
      player2Id: json['player2Id'] as String,
      player1Color: player1Color,
      player2Color: player2Color,
      currentTurn: json['currentTurn'] as String,
      boardState: boardState,
      moveHistory: moveHistory,
      status: MatchStatusExtension.fromJson(json['status'] as String),
      createdAt: DateTime.parse(json['createdAt'] as String),
      lastUpdateAt: DateTime.parse(json['lastUpdateAt'] as String),
    );
  }

  /// 转换为JSON
  Map<String, dynamic> toJson() {
    return {
      'matchId': matchId,
      'player1Id': player1Id,
      'player2Id': player2Id,
      'player1Color': player1Color == PieceType.black ? 'black' : 'white',
      'player2Color': player2Color == PieceType.black ? 'black' : 'white',
      'currentTurn': currentTurn,
      'boardState': BoardStateData.fromBoardState(boardState).toJson(),
      'moveHistory': moveHistory
          .map((m) => MoveData.fromMove(m).toJson())
          .toList(),
      'status': status.toJson(),
      'createdAt': createdAt.toIso8601String(),
      'lastUpdateAt': lastUpdateAt.toIso8601String(),
    };
  }

  /// 创建新匹配
  factory OnlineMatch.create({
    required String matchId,
    required String player1Id,
    required String player2Id,
    PieceType? player1Color,
  }) {
    final p1Color = player1Color ?? PieceType.black;
    final p2Color = p1Color == PieceType.black ? PieceType.white : PieceType.black;
    final now = DateTime.now();

    return OnlineMatch(
      matchId: matchId,
      player1Id: player1Id,
      player2Id: player2Id,
      player1Color: p1Color,
      player2Color: p2Color,
      currentTurn: p1Color == PieceType.black ? player1Id : player2Id,
      boardState: BoardState.initial(),
      moveHistory: const [],
      status: MatchStatus.playing,
      createdAt: now,
      lastUpdateAt: now,
    );
  }

  /// 判断是否是某个玩家的回合
  bool isPlayerTurn(String playerId) {
    return currentTurn == playerId;
  }

  /// 获取玩家颜色
  PieceType? getPlayerColor(String playerId) {
    if (playerId == player1Id) return player1Color;
    if (playerId == player2Id) return player2Color;
    return null;
  }

  /// 获取对手ID
  String? getOpponentId(String playerId) {
    if (playerId == player1Id) return player2Id;
    if (playerId == player2Id) return player1Id;
    return null;
  }

  /// 复制并修改部分字段
  OnlineMatch copyWith({
    String? matchId,
    String? player1Id,
    String? player2Id,
    PieceType? player1Color,
    PieceType? player2Color,
    String? currentTurn,
    BoardState? boardState,
    List<Move>? moveHistory,
    MatchStatus? status,
    DateTime? createdAt,
    DateTime? lastUpdateAt,
  }) {
    return OnlineMatch(
      matchId: matchId ?? this.matchId,
      player1Id: player1Id ?? this.player1Id,
      player2Id: player2Id ?? this.player2Id,
      player1Color: player1Color ?? this.player1Color,
      player2Color: player2Color ?? this.player2Color,
      currentTurn: currentTurn ?? this.currentTurn,
      boardState: boardState ?? this.boardState,
      moveHistory: moveHistory ?? this.moveHistory,
      status: status ?? this.status,
      createdAt: createdAt ?? this.createdAt,
      lastUpdateAt: lastUpdateAt ?? this.lastUpdateAt,
    );
  }

  @override
  List<Object?> get props => [
        matchId,
        player1Id,
        player2Id,
        player1Color,
        player2Color,
        currentTurn,
        boardState,
        moveHistory,
        status,
        createdAt,
        lastUpdateAt,
      ];

  @override
  String toString() {
    return 'OnlineMatch(id: $matchId, status: ${status.displayName}, '
        'turn: $currentTurn, moves: ${moveHistory.length})';
  }
}
