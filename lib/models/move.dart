// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 实现移动记录模型，记录游戏中的每次移动操作

import 'package:equatable/equatable.dart';
import 'position.dart';
import 'piece_type.dart';

/// 移动记录
/// 
/// 记录一次移动操作的完整信息，包括：
/// - 起始位置
/// - 目标位置
/// - 移动方
/// - 被吃棋子位置（可选）
/// - 移动时间
class Move extends Equatable {
  /// 起始位置
  final Position from;
  
  /// 目标位置
  final Position to;
  
  /// 移动方
  final PieceType player;
  
  /// 被吃棋子位置（可选）
  final Position? capturedPiece;
  
  /// 移动时间
  final DateTime timestamp;

  const Move({
    required this.from,
    required this.to,
    required this.player,
    this.capturedPiece,
    required this.timestamp,
  });

  /// 创建移动记录（使用当前时间）
  factory Move.now({
    required Position from,
    required Position to,
    required PieceType player,
    Position? capturedPiece,
  }) {
    return Move(
      from: from,
      to: to,
      player: player,
      capturedPiece: capturedPiece,
      timestamp: DateTime.now(),
    );
  }

  /// 是否有吃子
  bool get hasCapture => capturedPiece != null;

  /// 创建副本
  Move copyWith({
    Position? from,
    Position? to,
    PieceType? player,
    Position? capturedPiece,
    DateTime? timestamp,
  }) {
    return Move(
      from: from ?? this.from,
      to: to ?? this.to,
      player: player ?? this.player,
      capturedPiece: capturedPiece ?? this.capturedPiece,
      timestamp: timestamp ?? this.timestamp,
    );
  }

  /// 转换为Map（用于序列化）
  Map<String, dynamic> toJson() {
    return {
      'from': {'x': from.x, 'y': from.y},
      'to': {'x': to.x, 'y': to.y},
      'player': player.name,
      'capturedPiece': capturedPiece != null
          ? {'x': capturedPiece!.x, 'y': capturedPiece!.y}
          : null,
      'timestamp': timestamp.toIso8601String(),
    };
  }

  /// 从Map创建（用于反序列化）
  factory Move.fromJson(Map<String, dynamic> json) {
    final fromMap = json['from'] as Map<String, dynamic>;
    final toMap = json['to'] as Map<String, dynamic>;
    final capturedMap = json['capturedPiece'] as Map<String, dynamic>?;

    return Move(
      from: Position(fromMap['x'] as int, fromMap['y'] as int),
      to: Position(toMap['x'] as int, toMap['y'] as int),
      player: PieceType.values.firstWhere(
        (e) => e.name == json['player'],
      ),
      capturedPiece: capturedMap != null
          ? Position(capturedMap['x'] as int, capturedMap['y'] as int)
          : null,
      timestamp: DateTime.parse(json['timestamp'] as String),
    );
  }

  /// 获取移动描述（用于显示）
  String getDescription() {
    final buffer = StringBuffer();
    buffer.write('${player.getDisplayName()}从');
    buffer.write('(${from.x},${from.y})移至(${to.x},${to.y})');
    if (hasCapture) {
      buffer.write('，吃掉(${capturedPiece!.x},${capturedPiece!.y})');
    }
    return buffer.toString();
  }

  @override
  List<Object?> get props => [from, to, player, capturedPiece, timestamp];

  @override
  String toString() {
    return 'Move(from: $from, to: $to, player: $player, '
        'captured: $capturedPiece, time: $timestamp)';
  }
}
