// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-22
// Task: 错误处理工具类，提供友好的错误提示

import 'package:flutter/material.dart';
import '../exceptions/app_exceptions.dart';

/// 错误处理工具类
class ErrorHandler {
  ErrorHandler._();

  /// 显示错误提示Toast
  static void showErrorToast(BuildContext context, dynamic error) {
    final message = _getErrorMessage(error);
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(
              Icons.error_outline,
              color: Colors.white,
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                message,
                style: const TextStyle(fontSize: 14),
              ),
            ),
          ],
        ),
        backgroundColor: Colors.red.shade600,
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.all(16),
        duration: const Duration(seconds: 3),
        action: SnackBarAction(
          label: '关闭',
          textColor: Colors.white,
          onPressed: () {
            ScaffoldMessenger.of(context).hideCurrentSnackBar();
          },
        ),
      ),
    );
  }

  /// 显示成功提示Toast
  static void showSuccessToast(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(
              Icons.check_circle_outline,
              color: Colors.white,
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                message,
                style: const TextStyle(fontSize: 14),
              ),
            ),
          ],
        ),
        backgroundColor: Colors.green.shade600,
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.all(16),
        duration: const Duration(seconds: 2),
      ),
    );
  }

  /// 显示警告提示Toast
  static void showWarningToast(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(
              Icons.warning_amber_rounded,
              color: Colors.white,
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                message,
                style: const TextStyle(fontSize: 14),
              ),
            ),
          ],
        ),
        backgroundColor: Colors.orange.shade600,
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.all(16),
        duration: const Duration(seconds: 3),
      ),
    );
  }

  /// 显示错误对话框
  static Future<void> showErrorDialog(
    BuildContext context,
    dynamic error, {
    String? title,
    VoidCallback? onRetry,
  }) async {
    final message = _getErrorMessage(error);
    final details = _getErrorDetails(error);

    return showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(
              Icons.error_outline,
              color: Colors.red.shade600,
            ),
            const SizedBox(width: 12),
            Text(title ?? '错误'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              message,
              style: const TextStyle(fontSize: 16),
            ),
            if (details != null) ...[
              const SizedBox(height: 12),
              Text(
                '详细信息:',
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey.shade700,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                details,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey.shade600,
                ),
              ),
            ],
          ],
        ),
        actions: [
          if (onRetry != null)
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                onRetry();
              },
              child: const Text('重试'),
            ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('确定'),
          ),
        ],
      ),
    );
  }

  /// 获取友好的错误消息
  static String _getErrorMessage(dynamic error) {
    if (error is InvalidMoveException) {
      return _getInvalidMoveMessage(error.reason);
    }
    
    if (error is GameOverException) {
      return '游戏已结束，无法继续操作';
    }
    
    if (error is ConnectionFailedException) {
      return '无法连接到服务器，请检查网络连接';
    }
    
    if (error is TimeoutException) {
      return '连接超时，请稍后重试';
    }
    
    if (error is SaveFailedException) {
      return '保存失败，请重试';
    }
    
    if (error is LoadFailedException) {
      return '加载失败，数据可能已损坏';
    }
    
    if (error is NoAvailableMoveException) {
      return 'AI无可用移动，游戏结束';
    }
    
    if (error is AudioFileNotFoundException) {
      return '音频文件缺失: ${(error as AudioFileNotFoundException).fileName}';
    }
    
    if (error is AppException) {
      return error.message;
    }
    
    // 默认错误消息
    return '操作失败: ${error.toString()}';
  }

  /// 获取非法移动的详细消息
  static String _getInvalidMoveMessage(String reason) {
    // 根据reason返回更友好的提示
    final reasonLower = reason.toLowerCase();
    
    if (reasonLower.contains('adjacent') || reasonLower.contains('相邻')) {
      return '只能移动到相邻的空位';
    }
    
    if (reasonLower.contains('occupied') || reasonLower.contains('已占')) {
      return '目标位置已有棋子';
    }
    
    if (reasonLower.contains('diagonal') || reasonLower.contains('斜')) {
      return '不能斜向移动';
    }
    
    if (reasonLower.contains('empty') || reasonLower.contains('空')) {
      return '请选择己方棋子';
    }
    
    if (reasonLower.contains('wrong player') || reasonLower.contains('不是你的')) {
      return '请选择己方棋子';
    }
    
    return reason;
  }

  /// 获取错误详细信息
  static String? _getErrorDetails(dynamic error) {
    if (error is AppException) {
      return error.details;
    }
    return null;
  }

  /// 处理异步操作错误
  static Future<T?> handleAsync<T>(
    BuildContext context,
    Future<T> Function() operation, {
    String? successMessage,
    bool showErrorDialog = false,
    VoidCallback? onError,
  }) async {
    try {
      final result = await operation();
      if (successMessage != null) {
        showSuccessToast(context, successMessage);
      }
      return result;
    } catch (e) {
      if (showErrorDialog) {
        await ErrorHandler.showErrorDialog(
          context,
          e,
          onRetry: onError,
        );
      } else {
        showErrorToast(context, e);
      }
      onError?.call();
      return null;
    }
  }
}
